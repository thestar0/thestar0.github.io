{"pageProps":{"NOTION_CONFIG":{},"notice":null,"siteInfo":{"title":"安全沉思录","description":"记录所思","pageCover":"https://www.notion.so/image/attachment%3Ade44147d-4cdf-48f2-8ff9-2a64437e928b%3AUntitled.png?table=collection&id=210b67db-fc9a-8121-bebe-000bb39448db&t=210b67db-fc9a-8121-bebe-000bb39448db","icon":"notion://custom_emoji/0dd8935a-39f8-4c94-aaf7-d2de23196366/225b67db-fc9a-80fe-9e2f-007add087083?t=210b67db-fc9a-8121-bebe-000bb39448db","link":"https://thestar0.github.io/"},"allNavPages":[{"title":"契约锁-dbtest接口JDBC反序列化漏洞复现","pageCoverThumbnail":"","category":"漏洞分析","tags":["JDBC反序列化漏洞","契约锁"],"summary":null,"slug":"article/2025/06/12/20fb67db-fc9a-8088-9172-e2de1af90222","href":"/article/2025/06/12/20fb67db-fc9a-8088-9172-e2de1af90222","pageIcon":"","lastEditedDate":"2025-09-10T14:03:56.740Z","publishDate":1749772800000,"ext":{},"short_id":"8088-9172-e2de1af90222"},{"title":"H5页面调试抓包","pageCoverThumbnail":"","category":null,"tags":["渗透测试"],"summary":null,"slug":"article/2024/11/15/142b67db-fc9a-80cc-9af2-ddd7fd405259","href":"/article/2024/11/15/142b67db-fc9a-80cc-9af2-ddd7fd405259","pageIcon":"","lastEditedDate":"2025-06-15T08:04:06.092Z","publishDate":1731628800000,"ext":{},"short_id":"80cc-9af2-ddd7fd405259"},{"title":"2024 鹏城杯初赛WriteUp（RE）","pageCoverThumbnail":"","category":"CTF","tags":["WP","WriteUp"],"summary":null,"slug":"article/2024/11/10/13ab67db-fc9a-8042-8495-c3c466962833","href":"/article/2024/11/10/13ab67db-fc9a-8042-8495-c3c466962833","pageIcon":"","lastEditedDate":"2025-06-12T20:07:02.675Z","publishDate":1731196800000,"ext":{},"short_id":"8042-8495-c3c466962833"},{"title":"CVE-2024-23897漏洞复现","pageCoverThumbnail":"","category":"漏洞分析","tags":["CVE-2024-23897","任意文件读取漏洞","Jenkins"],"summary":"Jenkins CLI 接口任意文件读取漏洞","slug":"article/2024/10/30/12eb67db-fc9a-8056-8c41-dbc587108bd8","href":"/article/2024/10/30/12eb67db-fc9a-8056-8c41-dbc587108bd8","pageIcon":"","lastEditedDate":"2025-09-10T14:04:09.775Z","publishDate":1730246400000,"ext":{},"short_id":"8056-8c41-dbc587108bd8"},{"title":"BP和 Yakit 抓最新版微信小程序抓包教程-mac","pageCoverThumbnail":"","category":null,"tags":null,"summary":"mac 微信小程序抓包","slug":"article/2024/04/10/20a3610a-ef40-4386-ae7a-a508909f6e27","href":"/article/2024/04/10/20a3610a-ef40-4386-ae7a-a508909f6e27","pageIcon":"","lastEditedDate":"2025-06-20T18:01:15.877Z","publishDate":1712793600000,"ext":{},"short_id":"4386-ae7a-a508909f6e27"},{"title":"从0到1复活wooyun","pageCoverThumbnail":"","category":"渗透测试","tags":null,"summary":"wiki搭建合集","slug":"article/2023/07/24/2595be8c-a903-4997-884f-2e6eea612429","href":"/article/2023/07/24/2595be8c-a903-4997-884f-2e6eea612429","pageIcon":"","lastEditedDate":"2025-06-20T18:00:33.366Z","publishDate":1690243200000,"ext":{},"short_id":"4997-884f-2e6eea612429"},{"title":"2023CISCN初赛WriteUp","pageCoverThumbnail":"","category":"CTF","tags":["WriteUp"],"summary":null,"slug":"article/2023/05/28/ad39dd30-fdb2-4fcc-aa48-a8112a6a346a","href":"/article/2023/05/28/ad39dd30-fdb2-4fcc-aa48-a8112a6a346a","pageIcon":"","lastEditedDate":"2025-06-12T20:07:07.296Z","publishDate":1685318400000,"ext":{},"short_id":"4fcc-aa48-a8112a6a346a"},{"title":"x86汇编语言指北(汉化翻译)","pageCoverThumbnail":"","category":"翻译教程","tags":null,"summary":"x86汇编学习","slug":"article/2023/01/30/f036a70a-0a8c-4715-b382-3b70ee00ea05","href":"/article/2023/01/30/f036a70a-0a8c-4715-b382-3b70ee00ea05","pageIcon":"🐒","lastEditedDate":"2025-09-10T13:58:48.572Z","publishDate":1675123200000,"ext":{},"short_id":"4715-b382-3b70ee00ea05"},{"title":"代码混淆技术之常量替换","pageCoverThumbnail":"","category":"二进制安全","tags":null,"summary":"常量替换混淆技术","slug":"article/2022/12/21/d56e837c-8e39-4d64-8589-c238a56d8e44","href":"/article/2022/12/21/d56e837c-8e39-4d64-8589-c238a56d8e44","pageIcon":"","lastEditedDate":"2025-09-10T13:58:05.894Z","publishDate":1671580800000,"ext":{},"short_id":"4d64-8589-c238a56d8e44"},{"title":"代码混淆技术之随机控制流","pageCoverThumbnail":"","category":"二进制安全","tags":null,"summary":"随机控制流混淆技术","slug":"article/2022/12/21/001c5807-161f-4069-a99c-1b57237d2992","href":"/article/2022/12/21/001c5807-161f-4069-a99c-1b57237d2992","pageIcon":"","lastEditedDate":"2025-09-10T13:58:14.031Z","publishDate":1671580800000,"ext":{},"short_id":"4069-a99c-1b57237d2992"},{"title":"代码混淆技术之指令替换","pageCoverThumbnail":"","category":"二进制安全","tags":null,"summary":"指令替换混淆技术","slug":"article/2022/12/21/b5038df5-153b-4d24-bc61-58013de5ca42","href":"/article/2022/12/21/b5038df5-153b-4d24-bc61-58013de5ca42","pageIcon":"","lastEditedDate":"2025-09-10T13:58:14.031Z","publishDate":1671580800000,"ext":{},"short_id":"4d24-bc61-58013de5ca42"},{"title":"代码混淆技术之虚假控制流","pageCoverThumbnail":"","category":"二进制安全","tags":null,"summary":"虚假控制流混淆技术","slug":"article/2022/12/21/21d5e1a0-7a5d-48ff-998b-6377f7ce7a9f","href":"/article/2022/12/21/21d5e1a0-7a5d-48ff-998b-6377f7ce7a9f","pageIcon":"","lastEditedDate":"2025-09-10T13:58:14.031Z","publishDate":1671580800000,"ext":{},"short_id":"48ff-998b-6377f7ce7a9f"},{"title":"代码混淆技术之控制流平坦化","pageCoverThumbnail":"","category":"二进制安全","tags":null,"summary":"控制流平坦化混淆技术","slug":"article/2022/12/21/eef4533f-2e0e-40aa-b2ad-b859a802825c","href":"/article/2022/12/21/eef4533f-2e0e-40aa-b2ad-b859a802825c","pageIcon":"","lastEditedDate":"2025-09-10T13:58:14.031Z","publishDate":1671580800000,"ext":{},"short_id":"40aa-b2ad-b859a802825c"},{"title":"LLVM 基本块分割","pageCoverThumbnail":"","category":"二进制安全","tags":null,"summary":"LLVM 基本块的简单分割，与代码实战演示","slug":"article/2022/12/19/8cd88b0f-7d1f-4629-bfdc-de0f24de1308","href":"/article/2022/12/19/8cd88b0f-7d1f-4629-bfdc-de0f24de1308","pageIcon":"","lastEditedDate":"2025-09-10T13:58:14.031Z","publishDate":1671408000000,"ext":{},"short_id":"4629-bfdc-de0f24de1308"},{"title":"LLVM IR指令详解与实战","pageCoverThumbnail":"","category":"二进制安全","tags":null,"summary":"花了几天的时间彻底吸收了LLVM IR的一丢丢","slug":"article/2022/12/16/9e3ffb57-ab3e-41d9-9828-91058b154dc2","href":"/article/2022/12/16/9e3ffb57-ab3e-41d9-9828-91058b154dc2","pageIcon":"","lastEditedDate":"2025-09-10T13:58:14.031Z","publishDate":1671148800000,"ext":{},"short_id":"41d9-9828-91058b154dc2"},{"title":"LLVM-PASS编写","pageCoverThumbnail":"","category":"二进制安全","tags":null,"summary":"llvm-pass初步上手","slug":"article/2022/12/15/385cfc11-4eea-4d18-832e-2ff52b908961","href":"/article/2022/12/15/385cfc11-4eea-4d18-832e-2ff52b908961","pageIcon":"","lastEditedDate":"2025-09-10T13:58:26.486Z","publishDate":1671062400000,"ext":{},"short_id":"4d18-832e-2ff52b908961"},{"title":"tea、xtea、xxtea算法详解","pageCoverThumbnail":"","category":"CTF","tags":null,"summary":"tea系列家族算法原理详解","slug":"article/2022/12/14/c9360c01-070f-4b23-ae03-4e435318a94b","href":"/article/2022/12/14/c9360c01-070f-4b23-ae03-4e435318a94b","pageIcon":"","lastEditedDate":"2025-09-10T13:57:01.714Z","publishDate":1670976000000,"ext":{},"short_id":"4b23-ae03-4e435318a94b"},{"title":"LLVM环境搭建与基本用法","pageCoverThumbnail":"","category":null,"tags":null,"summary":"LLVM环境搭建和简单使用","slug":"article/2022/12/14/9472ac55-a7d3-4758-b5f9-72c5df574e7f","href":"/article/2022/12/14/9472ac55-a7d3-4758-b5f9-72c5df574e7f","pageIcon":"","lastEditedDate":"2025-09-10T03:53:36.204Z","publishDate":1670976000000,"ext":{},"short_id":"4758-b5f9-72c5df574e7f"},{"title":"OLLVM环境搭建和基本用法","pageCoverThumbnail":"","category":null,"tags":null,"summary":"OLLVM环境搭建","slug":"article/2022/12/14/f5cfb97a-9384-4548-9f51-de7f48c462e9","href":"/article/2022/12/14/f5cfb97a-9384-4548-9f51-de7f48c462e9","pageIcon":"","lastEditedDate":"2025-09-10T03:53:37.687Z","publishDate":1670976000000,"ext":{},"short_id":"4548-9f51-de7f48c462e9"},{"title":"2022网鼎杯（青龙组）WriteUp","pageCoverThumbnail":"","category":"CTF","tags":["WriteUp"],"summary":"网鼎杯wp","slug":"article/2022/08/31/9b67c174-1618-43eb-9cf2-bbd771043354","href":"/article/2022/08/31/9b67c174-1618-43eb-9cf2-bbd771043354","pageIcon":"","lastEditedDate":"2025-06-12T20:05:36.073Z","publishDate":1661990400000,"ext":{},"short_id":"43eb-9cf2-bbd771043354"},{"title":"PwnTools总结","pageCoverThumbnail":"https://www.notion.so/images/page-cover/woodcuts_5.jpg","category":"CTF","tags":null,"summary":"pwntools学习笔记","slug":"article/2022/08/23/07801026-0504-4b64-bad6-2c86260ef508","href":"/article/2022/08/23/07801026-0504-4b64-bad6-2c86260ef508","pageIcon":"","lastEditedDate":"2025-06-12T20:11:26.898Z","publishDate":1661299200000,"ext":{},"short_id":"4b64-bad6-2c86260ef508"},{"title":"pwn环境终极指南","pageCoverThumbnail":"","category":"CTF","tags":null,"summary":"慢慢完善","slug":"article/2022/08/16/bb2f36ec-1ba9-480b-9ab5-b76c19b52d89","href":"/article/2022/08/16/bb2f36ec-1ba9-480b-9ab5-b76c19b52d89","pageIcon":"","lastEditedDate":"2025-06-12T20:36:32.526Z","publishDate":1660694400000,"ext":{},"short_id":"480b-9ab5-b76c19b52d89"},{"title":"花指令分析学习","pageCoverThumbnail":"","category":"CTF","tags":null,"summary":"花指令详解","slug":"article/2022/08/06/20f75995-1829-4fc6-9f33-13b64eb7e0be","href":"/article/2022/08/06/20f75995-1829-4fc6-9f33-13b64eb7e0be","pageIcon":"","lastEditedDate":"2025-09-10T13:58:43.656Z","publishDate":1659830400000,"ext":{},"short_id":"4fc6-9f33-13b64eb7e0be"},{"title":"2022长安赛WriteUp","pageCoverThumbnail":"","category":"CTF","tags":["WriteUp"],"summary":null,"slug":"article/2022/06/29/5e87101b-0624-4fb6-85a0-deec5bf93aee","href":"/article/2022/06/29/5e87101b-0624-4fb6-85a0-deec5bf93aee","pageIcon":"","lastEditedDate":"2025-06-12T20:04:51.445Z","publishDate":1656547200000,"ext":{},"short_id":"4fb6-85a0-deec5bf93aee"},{"title":"VNCTF2022WriteUp","pageCoverThumbnail":"","category":"CTF","tags":["WriteUp"],"summary":"VNCTF比赛","slug":"article/2022/06/29/3dbbfc68-5579-41eb-afad-7cf5849dfc38","href":"/article/2022/06/29/3dbbfc68-5579-41eb-afad-7cf5849dfc38","pageIcon":"","lastEditedDate":"2025-06-12T20:05:20.598Z","publishDate":1656547200000,"ext":{},"short_id":"41eb-afad-7cf5849dfc38"},{"title":"2022CISCN初赛WriteUp","pageCoverThumbnail":"","category":"CTF","tags":["WriteUp"],"summary":"2022信息安全大赛国赛分区赛","slug":"article/2022/06/29/416b6888-102e-41db-a58e-3dd178d5b149","href":"/article/2022/06/29/416b6888-102e-41db-a58e-3dd178d5b149","pageIcon":"","lastEditedDate":"2025-06-12T20:08:14.109Z","publishDate":1656547200000,"ext":{},"short_id":"41db-a58e-3dd178d5b149"}],"tagOptions":[{"name":"任意文件读取漏洞","color":"pink","count":1},{"name":"JDBC反序列化漏洞","color":"gray","count":1},{"name":"契约锁","color":"brown","count":1},{"name":"Jenkins","color":"default","count":1}],"categoryOptions":[{"name":"漏洞分析","color":"green","count":2},{"name":"CTF","color":"default","count":10},{"name":"二进制安全","color":"blue","count":8}],"customNav":[],"customMenu":[],"postCount":26,"latestPosts":[{"id":"12eb67db-fc9a-8056-8c41-dbc587108bd8","date":{"start_date":"2024-10-30"},"type":"Post","category":"漏洞分析","tags":["CVE-2024-23897","任意文件读取漏洞","Jenkins"],"summary":"Jenkins CLI 接口任意文件读取漏洞","title":"CVE-2024-23897漏洞复现","status":"Published","comment":"","publishDate":1730246400000,"publishDay":"2024-10-30","lastEditedDate":"2025-09-10T14:04:09.775Z","lastEditedDay":"2025-9-10","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[{"name":"任意文件读取漏洞","color":"pink"},{"name":"Jenkins","color":"default"}],"slug":"article/2024/10/30/12eb67db-fc9a-8056-8c41-dbc587108bd8","href":"/article/2024/10/30/12eb67db-fc9a-8056-8c41-dbc587108bd8","target":"_self","password":""},{"id":"20fb67db-fc9a-8088-9172-e2de1af90222","date":{"start_date":"2025-06-13"},"type":"Post","category":"漏洞分析","tags":["JDBC反序列化漏洞","契约锁"],"title":"契约锁-dbtest接口JDBC反序列化漏洞复现","status":"Published","comment":"","publishDate":1749772800000,"publishDay":"2025-6-13","lastEditedDate":"2025-09-10T14:03:56.740Z","lastEditedDay":"2025-9-10","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[{"name":"JDBC反序列化漏洞","color":"gray"},{"name":"契约锁","color":"brown"}],"slug":"article/2025/06/12/20fb67db-fc9a-8088-9172-e2de1af90222","href":"/article/2025/06/12/20fb67db-fc9a-8088-9172-e2de1af90222","target":"_self","password":""},{"id":"f036a70a-0a8c-4715-b382-3b70ee00ea05","date":{"start_date":"2023-01-31"},"type":"Post","category":"翻译教程","summary":"x86汇编学习","title":"x86汇编语言指北(汉化翻译)","status":"Published","comment":"","publishDate":1675123200000,"publishDay":"2023-1-31","lastEditedDate":"2025-09-10T13:58:48.572Z","lastEditedDay":"2025-9-10","fullWidth":false,"pageIcon":"🐒","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[],"slug":"article/2023/01/30/f036a70a-0a8c-4715-b382-3b70ee00ea05","href":"/article/2023/01/30/f036a70a-0a8c-4715-b382-3b70ee00ea05","target":"_self","password":""},{"id":"20f75995-1829-4fc6-9f33-13b64eb7e0be","date":{"start_date":"2022-08-07"},"type":"Post","category":"CTF","summary":"花指令详解","title":"花指令分析学习","status":"Published","comment":"","publishDate":1659830400000,"publishDay":"2022-8-7","lastEditedDate":"2025-09-10T13:58:43.656Z","lastEditedDay":"2025-9-10","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[],"slug":"article/2022/08/06/20f75995-1829-4fc6-9f33-13b64eb7e0be","href":"/article/2022/08/06/20f75995-1829-4fc6-9f33-13b64eb7e0be","target":"_self","password":""},{"id":"385cfc11-4eea-4d18-832e-2ff52b908961","date":{"start_date":"2022-12-15"},"type":"Post","category":"二进制安全","summary":"llvm-pass初步上手","title":"LLVM-PASS编写","status":"Published","comment":"","publishDate":1671062400000,"publishDay":"2022-12-15","lastEditedDate":"2025-09-10T13:58:26.486Z","lastEditedDay":"2025-9-10","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[],"slug":"article/2022/12/15/385cfc11-4eea-4d18-832e-2ff52b908961","href":"/article/2022/12/15/385cfc11-4eea-4d18-832e-2ff52b908961","target":"_self","password":""},{"id":"001c5807-161f-4069-a99c-1b57237d2992","date":{"start_date":"2022-12-21"},"type":"Post","category":"二进制安全","summary":"随机控制流混淆技术","title":"代码混淆技术之随机控制流","status":"Published","comment":"","publishDate":1671580800000,"publishDay":"2022-12-21","lastEditedDate":"2025-09-10T13:58:14.031Z","lastEditedDay":"2025-9-10","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[],"slug":"article/2022/12/21/001c5807-161f-4069-a99c-1b57237d2992","href":"/article/2022/12/21/001c5807-161f-4069-a99c-1b57237d2992","target":"_self","password":""}],"post":{"id":"c9360c01-070f-4b23-ae03-4e435318a94b","date":{"start_date":"2022-12-14"},"type":"Post","category":"CTF","summary":"tea系列家族算法原理详解","title":"tea、xtea、xxtea算法详解","status":"Published","comment":"","publishDate":1670976000000,"publishDay":"2022-12-14","lastEditedDate":"2025-09-10T13:57:01.714Z","lastEditedDay":"2025-9-10","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[],"slug":"article/2022/12/14/c9360c01-070f-4b23-ae03-4e435318a94b","href":"/article/2022/12/14/c9360c01-070f-4b23-ae03-4e435318a94b","target":"_self","password":"","blockMap":{"block":{"c9360c01-070f-4b23-ae03-4e435318a94b":{"value":{"id":"c9360c01-070f-4b23-ae03-4e435318a94b","version":241,"type":"page","content":["ef10374c-621a-4fc1-b00b-73050a8eae1a","e2ea55c8-45a6-44b3-9b60-aa91d84486cf","271e44d3-9950-4339-b722-cf7a11302aeb","413b31a5-cd09-4624-b228-1124b910daf4","fee7571c-622e-45f7-8926-8d8c21201334","e5665bda-8070-46ce-8255-22c9f961d43e","b96c103d-3d5f-4ccc-b4c5-a64a3cb5284a","34a6ee56-7cc6-45b9-9489-3b0dd2c814ee","dcfdf9a9-ca84-4e13-9d92-5a72620e36e4","660ea9e9-f474-44d8-8986-9ff2b5f2fa19","1aa6a28e-4db6-4ffa-aa70-ec17fdf223f5","5f1ecb38-0289-46cf-b4a8-eab2f2a6075d","22fe5933-b59b-47bf-bf3c-58f148aac59d","7fd8faf6-7696-4dac-bd8d-d3a95f3bb670","2bfebd76-b512-4854-ba32-c754575eb999","423941b4-089f-4ae0-a5bd-ee32e38d92da","0582cc7e-f760-4cb8-8a31-f1a5075ab943","15ab3d28-3601-40f1-9973-995499ca09a8","a3af596f-247a-4e34-b037-59eb2083c38e","074c386c-53c5-4cfe-958d-43debf8e6f26","ba077cd5-bf8b-47d6-8727-8f27d1f1e709","a3728e08-9f7b-4448-afc3-2365fc3961b1","81ee5f17-49b2-4ea9-b384-3d53a057aa66","5fcb45f4-4ac5-4522-b37c-80cca58bfba3","efc611a3-92b2-44f2-a7af-e6855027fafe","368127f2-0d3c-4a41-8b39-21854a2b4636","9b7d3e5c-0234-47d0-a519-429db1dcd1b7","e631b258-3f61-41c1-8c7e-e54ec8beef7b","c46ddf4e-9eca-4c8d-8cc8-e01083449b5d","cf400c38-45ee-4d85-b6a5-caf983ee2be4","c9288bcc-9736-46ff-bd28-5c515492384b","3d620b49-c5ad-4d76-9a1a-62c2ec2dfc05","26ab67db-fc9a-8022-aa9e-d7ca6ae794fe","8bce3fc7-eea7-447c-b630-4a409ba09b45","d30227e1-54dc-4d5b-90f1-64da4d22042b","26ab67db-fc9a-80d5-aa11-fddab4d85a01"],"format":{"page_font":"mono","block_locked":false,"block_locked_by":"917b4bd9-a4fc-48ad-95f0-8eed14f27ec5","copied_from_pointer":{"id":"59f323b4-dbf7-4fad-92d3-16e89d200438","table":"block","spaceId":"0dd8935a-39f8-4c94-aaf7-d2de23196366"}},"created_time":1671000240000,"last_edited_time":1757512621714,"parent_id":"210b67db-fc9a-8121-bebe-000bb39448db","parent_table":"collection","alive":true,"copied_from":"59f323b4-dbf7-4fad-92d3-16e89d200438","space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"hEk6FVokZEs6i2jngeVcBw,\"start\",\"end\"","n":{"hEk6FVokZEs6i2jngeVcBw,\"start\",\"end\"":{"s":{"x":"hEk6FVokZEs6i2jngeVcBw","i":[{"t":"s"},{"t":"t","i":["AOdCep3ejjSp",1],"o":"start","l":18,"c":"tea、xtea、xxtea算法详解","b":[{"t":"a","x":"hEk6FVokZEs6i2jngeVcBw","l":"","i":["AOdCep3ejjSp",19],"s":{"i":["AOdCep3ejjSp",1],"a":"b"},"e":{"i":"end","a":"b"},"a":["b"]},{"t":"a","x":"hEk6FVokZEs6i2jngeVcBw","l":"","i":["AOdCep3ejjSp",20],"s":{"i":["AOdCep3ejjSp",1],"a":"b"},"e":{"i":"end","a":"b"},"a":["i"]}]},{"t":"e","b":[]}],"l":""},"c":[]}}}}},"role":"reader"},"210b67db-fc9a-80ed-8f3f-d06983ba70b2":{"value":{"id":"210b67db-fc9a-80ed-8f3f-d06983ba70b2","version":154,"type":"collection_view_page","content":["210b67db-fc9a-81b2-ac95-fe150207322a"],"view_ids":["210b67db-fc9a-8140-b9a0-000c10157bd6","216b67db-fc9a-80de-96f5-000ce107ba3c","210b67db-fc9a-81c8-ad66-000cf4838056","210b67db-fc9a-8138-ae5b-000cb5333572","210b67db-fc9a-81b8-b791-000c44caa07c"],"collection_id":"210b67db-fc9a-8121-bebe-000bb39448db","format":{"block_locked":false,"block_locked_by":"27074aef-7216-41ed-baef-d9b53addd870","collection_pointer":{"id":"210b67db-fc9a-8121-bebe-000bb39448db","table":"collection","spaceId":"0dd8935a-39f8-4c94-aaf7-d2de23196366"},"collection_pointers":[{"id":"210b67db-fc9a-8121-bebe-000bb39448db","table":"collection","spaceId":"0dd8935a-39f8-4c94-aaf7-d2de23196366"}],"copied_from_pointer":{"id":"02ab3b86-7800-4aa6-9e9e-415905ef32a5","table":"block","spaceId":"6c096b44-beb9-48ee-8f92-1efdde47f3a3"},"page_cover_position":0.5},"permissions":[{"role":"editor","type":"user_permission","user_id":"917b4bd9-a4fc-48ad-95f0-8eed14f27ec5"},{"role":"reader","type":"public_permission","is_site":true,"added_timestamp":1757511591748}],"created_time":1749756363583,"last_edited_time":1757513472894,"parent_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","parent_table":"space","alive":true,"copied_from":"02ab3b86-7800-4aa6-9e9e-415905ef32a5","file_ids":["819b206f-1f2e-4f8f-afe5-82b3ea067d0f"],"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"FNLtVrr9XhQzLmEOqwKg8A,\"start\",\"end\"","n":{"FNLtVrr9XhQzLmEOqwKg8A,\"start\",\"end\"":{"s":{"x":"FNLtVrr9XhQzLmEOqwKg8A","i":[{"t":"s"},{"t":"e"}],"l":""}}}}}},"role":"reader"},"ef10374c-621a-4fc1-b00b-73050a8eae1a":{"value":{"id":"ef10374c-621a-4fc1-b00b-73050a8eae1a","version":32,"type":"sub_header","properties":{"title":[["Tea"]]},"created_time":1671000319373,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"vQkL-kIAQxGPpzJ7ecl7Uw,\"start\",\"end\"","n":{"vQkL-kIAQxGPpzJ7ecl7Uw,\"start\",\"end\"":{"s":{"x":"vQkL-kIAQxGPpzJ7ecl7Uw","i":[{"t":"s"},{"t":"t","i":["cgtR2Qwbcz-g",1],"o":"start","l":3,"c":"Tea"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"e2ea55c8-45a6-44b3-9b60-aa91d84486cf":{"value":{"id":"e2ea55c8-45a6-44b3-9b60-aa91d84486cf","version":5,"type":"text","properties":{"title":[["直接来看代码吧，看不明白下面有详解和注释"]]},"created_time":1671000319373,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"iTKj218NrJSlAcj1785Dbg,\"start\",\"end\"","n":{"iTKj218NrJSlAcj1785Dbg,\"start\",\"end\"":{"s":{"x":"iTKj218NrJSlAcj1785Dbg","i":[{"t":"s"},{"t":"t","i":["MOEnvLLmItK0",1],"o":"start","l":20,"c":"直接来看代码吧，看不明白下面有详解和注释"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"271e44d3-9950-4339-b722-cf7a11302aeb":{"value":{"id":"271e44d3-9950-4339-b722-cf7a11302aeb","version":93,"type":"code","properties":{"title":[["#include <stdio.h>\n#include <stdint.h>\n\n// 加密函数\nvoid encrypt(uint32_t *v, uint32_t *k)\n{ // 传入v是我们的input数组，k是key数组\n    uint32_t v0 = v[0], v1 = v[1], i; // 把v数组丢进去，分组加密\n    uint32_t sum = 0;                 // 初始化sum为0\n    uint32_t delta = 0x9e3779b9;      // 这个是特征值0x9e3779b9\n    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3]; // key固定是128bit的数组，4个uint32_t整数，每个32位，一共128位\n    for (i = 0; i < 32; i++)\n    { // 初始轮转数是32轮，但是可以自己设定，例如64轮\n        sum += delta; // 每一轮都加特征值，溢出时直接舍去溢出部分，保留4字节，也就是32位\n        v0 += ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1); // 通过对v1加密得到v0\n        v1 += ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3); // 通过对加密后的v0加密得到v1\n    } // 就这样不停地轮转32次\n    // 将加密完的数据丢出来给v数组\n    v[0] = v0;\n    v[1] = v1; // 加密结束后，将v0和v1分别存储到v数组中得到密文\n}\n\n// 解密函数\nvoid decrypt(uint32_t *v, uint32_t *k)\n{ // 传入v是我们的input数组，k是key数组\n    uint32_t v0 = v[0], v1 = v[1], i; // 一次加密处理2个输入的大整数\n    uint32_t sum = 0xC6EF3720;        // sum为0xC6EF3720，这个是特征值0x9e3779b9乘以32的结果\n    uint32_t delta = 0x9e3779b9;      // 这个是特征值0x9e3779b9\n    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3]; // key固定是128bit的数组，4个uint32_t整数，每个32位，一共128位\n    for (i = 0; i < 32; i++)\n    { // 初始轮转数是32轮，但是可以自己设定，例如64轮\n        v1 -= ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3); // 通过对v0解密密得到v1\n        v0 -= ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1); // 通过对解密后的v1解密得到v0\n        sum -= delta; // 每一轮都减掉特征值，溢出时直接舍去溢出部分，保留4字节，也就是32位\n    } // 就这样不停地轮转32次\n    // 将加密完的数据丢出来给v数组\n    v[0] = v0;\n    v[1] = v1; // 解密结束后，将v0和v1分别存储到v数组中得到明文\n}\n\nint main()\n{\n    uint32_t data1, data2;\n    // 输入两个32位无符号整数\n    scanf(\"%u %u\", &data1, &data2);\n    uint32_t v[2] = {data1, data2}, k[4] = {213, 123, 123, 4};\n    // v为要加密的数据是两个32位无符号整数\n    // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位\n    printf(\"加密前原始数据：%u %u\\\\n\", v[0], v[1]); // 以无符号整数输出v数组\n    encrypt(v, k); // 加密\n    printf(\"加密后的数据：%u %u\\\\n\", v[0], v[1]); // 以无符号整数输出v数组\n    decrypt(v, k); // 解密\n    printf(\"解密后的数据：%u %u\\\\n\", v[0], v[1]); // 以无符号整数输出v数组\n    return 0;\n}"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1671000319374,"last_edited_time":1757512485760,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"wm6BkdiNliLFcYx-QS7c0A,\"start\",\"end\"","n":{"wm6BkdiNliLFcYx-QS7c0A,\"start\",\"end\"":{"s":{"x":"wm6BkdiNliLFcYx-QS7c0A","i":[{"t":"s"},{"t":"t","i":["Ro8rXAWfFrr9",1],"o":"start","l":18,"c":"#include <stdio.h>"},{"t":"t","i":["Ro8rXAWfFrr9",19],"o":["Ro8rXAWfFrr9",18],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",20],"o":["Ro8rXAWfFrr9",19],"l":29,"c":"\n#include <stdint.h>\n\n// 加密函数"},{"t":"t","i":["Ro8rXAWfFrr9",49],"o":["Ro8rXAWfFrr9",48],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",50],"o":["Ro8rXAWfFrr9",49],"l":39,"c":"\nvoid encrypt(uint32_t *v, uint32_t *k)"},{"t":"t","i":["Ro8rXAWfFrr9",89],"o":["Ro8rXAWfFrr9",88],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",90],"o":["Ro8rXAWfFrr9",89],"l":28,"c":"\n{ // 传入v是我们的input数组，k是key数组"},{"t":"t","i":["Ro8rXAWfFrr9",118],"o":["Ro8rXAWfFrr9",117],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",119],"o":["Ro8rXAWfFrr9",118],"l":162,"c":"\n    uint32_t v0 = v[0], v1 = v[1], i; // 把v数组丢进去，分组加密\n    uint32_t sum = 0;                 // 初始化sum为0\n    uint32_t delta = 0x9e3779b9;      // 这个是特征值0x9e3779b9"},{"t":"t","i":["Ro8rXAWfFrr9",281],"o":["Ro8rXAWfFrr9",280],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",282],"o":["Ro8rXAWfFrr9",281],"l":102,"c":"\n    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3]; // key固定是128bit的数组，4个uint32_t整数，每个32位，一共128位"},{"t":"t","i":["Ro8rXAWfFrr9",384],"o":["Ro8rXAWfFrr9",383],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",385],"o":["Ro8rXAWfFrr9",384],"l":28,"c":"\n    for (i = 0; i < 32; i++"},{"t":"t","i":["Ro8rXAWfFrr9",413],"o":["Ro8rXAWfFrr9",412],"l":-1},{"t":"t","i":["_N-fKeC6AfC3",2035],"o":["Ro8rXAWfFrr9",413],"l":1,"c":")"},{"t":"t","i":["Ro8rXAWfFrr9",414],"o":["Ro8rXAWfFrr9",413],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",415],"o":["Ro8rXAWfFrr9",414],"l":34,"c":"\n    { // 初始轮转数是32轮，但是可以自己设定，例如64轮"},{"t":"t","i":["Ro8rXAWfFrr9",449],"o":["Ro8rXAWfFrr9",448],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",450],"o":["Ro8rXAWfFrr9",449],"l":59,"c":"\n        sum += delta; // 每一轮都加特征值，溢出时直接舍去溢出部分，保留4字节，也就是32位"},{"t":"t","i":["Ro8rXAWfFrr9",509],"o":["Ro8rXAWfFrr9",508],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",510],"o":["Ro8rXAWfFrr9",509],"l":79,"c":"\n        v0 += ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1); // 通过对v1加密得到v0"},{"t":"t","i":["Ro8rXAWfFrr9",589],"o":["Ro8rXAWfFrr9",588],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",590],"o":["Ro8rXAWfFrr9",589],"l":83,"c":"\n        v1 += ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3); // 通过对加密后的v0加密得到v1"},{"t":"t","i":["Ro8rXAWfFrr9",673],"o":["Ro8rXAWfFrr9",672],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",674],"o":["Ro8rXAWfFrr9",673],"l":58,"c":"\n    } // 就这样不停地轮转32次\n    // 将加密完的数据丢出来给v数组\n    v[0] = v0;"},{"t":"t","i":["Ro8rXAWfFrr9",732],"o":["Ro8rXAWfFrr9",731],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",733],"o":["Ro8rXAWfFrr9",732],"l":55,"c":"\n    v[1] = v1; // 加密结束后，将v0和v1分别存储到v数组中得到密文\n}\n\n// 解密函数"},{"t":"t","i":["Ro8rXAWfFrr9",788],"o":["Ro8rXAWfFrr9",787],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",789],"o":["Ro8rXAWfFrr9",788],"l":39,"c":"\nvoid decrypt(uint32_t *v, uint32_t *k)"},{"t":"t","i":["Ro8rXAWfFrr9",828],"o":["Ro8rXAWfFrr9",827],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",829],"o":["Ro8rXAWfFrr9",828],"l":28,"c":"\n{ // 传入v是我们的input数组，k是key数组"},{"t":"t","i":["Ro8rXAWfFrr9",857],"o":["Ro8rXAWfFrr9",856],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",858],"o":["Ro8rXAWfFrr9",857],"l":194,"c":"\n    uint32_t v0 = v[0], v1 = v[1], i; // 一次加密处理2个输入的大整数\n    uint32_t sum = 0xC6EF3720;        // sum为0xC6EF3720，这个是特征值0x9e3779b9乘以32的结果\n    uint32_t delta = 0x9e3779b9;      // 这个是特征值0x9e3779b9"},{"t":"t","i":["Ro8rXAWfFrr9",1052],"o":["Ro8rXAWfFrr9",1051],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1053],"o":["Ro8rXAWfFrr9",1052],"l":102,"c":"\n    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3]; // key固定是128bit的数组，4个uint32_t整数，每个32位，一共128位"},{"t":"t","i":["Ro8rXAWfFrr9",1155],"o":["Ro8rXAWfFrr9",1154],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1156],"o":["Ro8rXAWfFrr9",1155],"l":29,"c":"\n    for (i = 0; i < 32; i++)"},{"t":"t","i":["Ro8rXAWfFrr9",1185],"o":["Ro8rXAWfFrr9",1184],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1186],"o":["Ro8rXAWfFrr9",1185],"l":34,"c":"\n    { // 初始轮转数是32轮，但是可以自己设定，例如64轮"},{"t":"t","i":["Ro8rXAWfFrr9",1220],"o":["Ro8rXAWfFrr9",1219],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1221],"o":["Ro8rXAWfFrr9",1220],"l":80,"c":"\n        v1 -= ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3); // 通过对v0解密密得到v1"},{"t":"t","i":["Ro8rXAWfFrr9",1301],"o":["Ro8rXAWfFrr9",1300],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1302],"o":["Ro8rXAWfFrr9",1301],"l":83,"c":"\n        v0 -= ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1); // 通过对解密后的v1解密得到v0"},{"t":"t","i":["Ro8rXAWfFrr9",1385],"o":["Ro8rXAWfFrr9",1384],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1386],"o":["Ro8rXAWfFrr9",1385],"l":60,"c":"\n        sum -= delta; // 每一轮都减掉特征值，溢出时直接舍去溢出部分，保留4字节，也就是32位"},{"t":"t","i":["Ro8rXAWfFrr9",1446],"o":["Ro8rXAWfFrr9",1445],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1447],"o":["Ro8rXAWfFrr9",1446],"l":58,"c":"\n    } // 就这样不停地轮转32次\n    // 将加密完的数据丢出来给v数组\n    v[0] = v0;"},{"t":"t","i":["Ro8rXAWfFrr9",1505],"o":["Ro8rXAWfFrr9",1504],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1506],"o":["Ro8rXAWfFrr9",1505],"l":46,"c":"\n    v[1] = v1; // 解密结束后，将v0和v1分别存储到v数组中得到明文\n}"},{"t":"t","i":["_N-fKeC6AfC3",2036],"o":["Ro8rXAWfFrr9",1551],"l":1,"c":"\n"},{"t":"t","i":["Ro8rXAWfFrr9",1552],"o":["Ro8rXAWfFrr9",1551],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1553],"o":["Ro8rXAWfFrr9",1552],"l":11,"c":"\nint main()"},{"t":"t","i":["Ro8rXAWfFrr9",1564],"o":["Ro8rXAWfFrr9",1563],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1565],"o":["Ro8rXAWfFrr9",1564],"l":2,"c":"\n{"},{"t":"t","i":["Ro8rXAWfFrr9",1567],"o":["Ro8rXAWfFrr9",1566],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1568],"o":["Ro8rXAWfFrr9",1567],"l":27,"c":"\n    uint32_t data1, data2;"},{"t":"t","i":["Ro8rXAWfFrr9",1595],"o":["Ro8rXAWfFrr9",1594],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1596],"o":["Ro8rXAWfFrr9",1595],"l":20,"c":"\n    // 输入两个32位无符号整数"},{"t":"t","i":["Ro8rXAWfFrr9",1616],"o":["Ro8rXAWfFrr9",1615],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1617],"o":["Ro8rXAWfFrr9",1616],"l":36,"c":"\n    scanf(\"%u %u\", &data1, &data2);"},{"t":"t","i":["Ro8rXAWfFrr9",1653],"o":["Ro8rXAWfFrr9",1652],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1654],"o":["Ro8rXAWfFrr9",1653],"l":63,"c":"\n    uint32_t v[2] = {data1, data2}, k[4] = {213, 123, 123, 4};"},{"t":"t","i":["Ro8rXAWfFrr9",1717],"o":["Ro8rXAWfFrr9",1716],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1718],"o":["Ro8rXAWfFrr9",1717],"l":27,"c":"\n    // v为要加密的数据是两个32位无符号整数"},{"t":"t","i":["Ro8rXAWfFrr9",1745],"o":["Ro8rXAWfFrr9",1744],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1746],"o":["Ro8rXAWfFrr9",1745],"l":39,"c":"\n    // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位"},{"t":"t","i":["Ro8rXAWfFrr9",1785],"o":["Ro8rXAWfFrr9",1784],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1786],"o":["Ro8rXAWfFrr9",1785],"l":59,"c":"\n    printf(\"加密前原始数据：%u %u\\\\n\", v[0], v[1]); // 以无符号整数输出v数组"},{"t":"t","i":["Ro8rXAWfFrr9",1845],"o":["Ro8rXAWfFrr9",1844],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1846],"o":["Ro8rXAWfFrr9",1845],"l":25,"c":"\n    encrypt(v, k); // 加密"},{"t":"t","i":["Ro8rXAWfFrr9",1871],"o":["Ro8rXAWfFrr9",1870],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1872],"o":["Ro8rXAWfFrr9",1871],"l":58,"c":"\n    printf(\"加密后的数据：%u %u\\\\n\", v[0], v[1]); // 以无符号整数输出v数组"},{"t":"t","i":["Ro8rXAWfFrr9",1930],"o":["Ro8rXAWfFrr9",1929],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1931],"o":["Ro8rXAWfFrr9",1930],"l":25,"c":"\n    decrypt(v, k); // 解密"},{"t":"t","i":["Ro8rXAWfFrr9",1956],"o":["Ro8rXAWfFrr9",1955],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",1957],"o":["Ro8rXAWfFrr9",1956],"l":58,"c":"\n    printf(\"解密后的数据：%u %u\\\\n\", v[0], v[1]); // 以无符号整数输出v数组"},{"t":"t","i":["Ro8rXAWfFrr9",2015],"o":["Ro8rXAWfFrr9",2014],"l":-1},{"t":"t","i":["Ro8rXAWfFrr9",2016],"o":["Ro8rXAWfFrr9",2015],"l":16,"c":"\n    return 0;\n}"},{"t":"t","i":["Ro8rXAWfFrr9",2032],"o":["Ro8rXAWfFrr9",2031],"l":-2},{"t":"t","i":["Ro8rXAWfFrr9",2034],"o":["Ro8rXAWfFrr9",2033],"l":-1},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"413b31a5-cd09-4624-b228-1124b910daf4":{"value":{"id":"413b31a5-cd09-4624-b228-1124b910daf4","version":5,"type":"quote","properties":{"title":[["有的地方初次看的话，会有很多地方看不懂, 所以下面解释一下"]]},"created_time":1671000319374,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"KCk5VN5lVdZtfY_1i-f3Tg,\"start\",\"end\"","n":{"KCk5VN5lVdZtfY_1i-f3Tg,\"start\",\"end\"":{"s":{"x":"KCk5VN5lVdZtfY_1i-f3Tg","i":[{"t":"s"},{"t":"t","i":["GwalhFzH9s30",1],"o":"start","l":29,"c":"有的地方初次看的话，会有很多地方看不懂, 所以下面解释一下"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"fee7571c-622e-45f7-8926-8d8c21201334":{"value":{"id":"fee7571c-622e-45f7-8926-8d8c21201334","version":5,"type":"text","properties":{"title":[["但我们需要知道的东西是\nTea 算法有一个魔数 delta=0x9e3779b9\n这个值，是标准 tea 算法的魔数，如果看到这个特征值多半就是 tea 加密"]]},"created_time":1671000319374,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"yLUoYtYbh2Qw9N_vVVWBSA,\"start\",\"end\"","n":{"yLUoYtYbh2Qw9N_vVVWBSA,\"start\",\"end\"":{"s":{"x":"yLUoYtYbh2Qw9N_vVVWBSA","i":[{"t":"s"},{"t":"t","i":["6MaZEhz5x0-I",1],"o":"start","l":79,"c":"但我们需要知道的东西是\nTea 算法有一个魔数 delta=0x9e3779b9\n这个值，是标准 tea 算法的魔数，如果看到这个特征值多半就是 tea 加密"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"e5665bda-8070-46ce-8255-22c9f961d43e":{"value":{"id":"e5665bda-8070-46ce-8255-22c9f961d43e","version":5,"type":"text","properties":{"title":[["然后我们看到解密算法里面有一个数"]]},"created_time":1671000319374,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"wQD6O4ZT9rpDgZrwE2gLjQ,\"start\",\"end\"","n":{"wQD6O4ZT9rpDgZrwE2gLjQ,\"start\",\"end\"":{"s":{"x":"wQD6O4ZT9rpDgZrwE2gLjQ","i":[{"t":"s"},{"t":"t","i":["pj534wxDa-uE",1],"o":"start","l":16,"c":"然后我们看到解密算法里面有一个数"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"b96c103d-3d5f-4ccc-b4c5-a64a3cb5284a":{"value":{"id":"b96c103d-3d5f-4ccc-b4c5-a64a3cb5284a","version":5,"type":"text","properties":{"title":[["sum=0xC6EF3720"]]},"created_time":1671000319374,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"DCxVQykmxE3ZgCw37OFjLw,\"start\",\"end\"","n":{"DCxVQykmxE3ZgCw37OFjLw,\"start\",\"end\"":{"s":{"x":"DCxVQykmxE3ZgCw37OFjLw","i":[{"t":"s"},{"t":"t","i":["IAE54rNqbmXG",1],"o":"start","l":14,"c":"sum=0xC6EF3720"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"34a6ee56-7cc6-45b9-9489-3b0dd2c814ee":{"value":{"id":"34a6ee56-7cc6-45b9-9489-3b0dd2c814ee","version":10,"type":"text","properties":{"title":[["这个数是怎么来的呢？\n很简单记住一个公式就行\nDelta * 加密轮数然后从后面取 8 位\n比如这里：\ndelta * 0x20 (32)  = 0x13C6EF3720\n这里取 8 位的话，就是0xC6EF3720\n"]]},"created_time":1671000319374,"last_edited_time":1671000360001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"uxd0XpJymfMuZhB0--yamw,\"start\",\"end\"","n":{"uxd0XpJymfMuZhB0--yamw,\"start\",\"end\"":{"s":{"x":"uxd0XpJymfMuZhB0--yamw","i":[{"t":"s"},{"t":"t","i":["wgfM7701uNKE",1],"o":"start","l":109,"c":"这个数是怎么来的呢？\n很简单记住一个公式就行\nDelta * 加密轮数然后从后面取 8 位\n比如这里：\ndelta * 0x20 (32)  = 0x13C6EF3720\n这里取 8 位的话，就是0xC6EF3720\n"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"dcfdf9a9-ca84-4e13-9d92-5a72620e36e4":{"value":{"id":"dcfdf9a9-ca84-4e13-9d92-5a72620e36e4","version":12,"type":"image","properties":{"size":[["78.2KB"]],"title":[["Untitled"]],"source":[["https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ea46ab67-9927-4882-992e-61df83b4f873/Untitled.png"]]},"format":{"block_width":499,"block_height":774,"display_source":"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ea46ab67-9927-4882-992e-61df83b4f873/Untitled.png","block_full_width":false,"block_page_width":false,"block_aspect_ratio":1.5511022044088176,"block_preserve_scale":true},"created_time":1671000360000,"last_edited_time":1671000360001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"file_ids":["ea46ab67-9927-4882-992e-61df83b4f873"],"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"lsO2Uh7fZvhmfxWojxL8ng,\"start\",\"end\"","n":{"lsO2Uh7fZvhmfxWojxL8ng,\"start\",\"end\"":{"s":{"x":"lsO2Uh7fZvhmfxWojxL8ng","i":[{"t":"s"},{"t":"t","i":["HGzCaDfLXAgs",1],"o":"start","l":8,"c":"Untitled"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"660ea9e9-f474-44d8-8986-9ff2b5f2fa19":{"value":{"id":"660ea9e9-f474-44d8-8986-9ff2b5f2fa19","version":5,"type":"text","properties":{"title":[["然后再解释一下左移和右移\n左移多少位就是该值乘以 2 的移位次方\n相反右移多少位就是该值除以 2 的移位次方"]]},"created_time":1671000319374,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"zf_OiPNLG4W1AVkTrwEDow,\"start\",\"end\"","n":{"zf_OiPNLG4W1AVkTrwEDow,\"start\",\"end\"":{"s":{"x":"zf_OiPNLG4W1AVkTrwEDow","i":[{"t":"s"},{"t":"t","i":["JakfiPhyyxav",1],"o":"start","l":54,"c":"然后再解释一下左移和右移\n左移多少位就是该值乘以 2 的移位次方\n相反右移多少位就是该值除以 2 的移位次方"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"1aa6a28e-4db6-4ffa-aa70-ec17fdf223f5":{"value":{"id":"1aa6a28e-4db6-4ffa-aa70-ec17fdf223f5","version":5,"type":"text","properties":{"title":[["举例:\na<<4 表示 a 乘以 2 的 4 次方\na>>5表示a除以2的5次方\na 移动 x 位表示对 a 进行 2 的 x 次方操作"]]},"created_time":1671000319375,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"VXteFAlA0UOebOxy1lizjA,\"start\",\"end\"","n":{"VXteFAlA0UOebOxy1lizjA,\"start\",\"end\"":{"s":{"x":"VXteFAlA0UOebOxy1lizjA","i":[{"t":"s"},{"t":"t","i":["aklEJa0uYe04",1],"o":"start","l":68,"c":"举例:\na<<4 表示 a 乘以 2 的 4 次方\na>>5表示a除以2的5次方\na 移动 x 位表示对 a 进行 2 的 x 次方操作"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"5f1ecb38-0289-46cf-b4a8-eab2f2a6075d":{"value":{"id":"5f1ecb38-0289-46cf-b4a8-eab2f2a6075d","version":8,"type":"text","properties":{"title":[["由于是函数传参用的 eax 寄存器，用来存储 32 位的无符号整数，最大 4 字节，所以多出来的会省去"]]},"created_time":1671000319375,"last_edited_time":1671000360001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"FBGmG9RUCEtWUUm8whRiDA,\"start\",\"end\"","n":{"FBGmG9RUCEtWUUm8whRiDA,\"start\",\"end\"":{"s":{"x":"FBGmG9RUCEtWUUm8whRiDA","i":[{"t":"s"},{"t":"t","i":["oDIn2YgVm4KE",1],"o":"start","l":51,"c":"由于是函数传参用的 eax 寄存器，用来存储 32 位的无符号整数，最大 4 字节，所以多出来的会省去"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"22fe5933-b59b-47bf-bf3c-58f148aac59d":{"value":{"id":"22fe5933-b59b-47bf-bf3c-58f148aac59d","version":7,"type":"text","properties":{"title":[["举个例子：如果是 0x1b2ceed32f，则会看到 0x2ceed32f，在这里先提个醒，下面直接分析加密算法："]]},"created_time":1671000360000,"last_edited_time":1671000360001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"FE_MH4T9iI4gS4NZ1D-dtA,\"start\",\"end\"","n":{"FE_MH4T9iI4gS4NZ1D-dtA,\"start\",\"end\"":{"s":{"x":"FE_MH4T9iI4gS4NZ1D-dtA","i":[{"t":"s"},{"t":"t","i":["xv4Vt7MM2qdz",1],"o":"start","l":57,"c":"举个例子：如果是 0x1b2ceed32f，则会看到 0x2ceed32f，在这里先提个醒，下面直接分析加密算法："},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"7fd8faf6-7696-4dac-bd8d-d3a95f3bb670":{"value":{"id":"7fd8faf6-7696-4dac-bd8d-d3a95f3bb670","version":34,"type":"code","properties":{"title":[["void encrypt(uint32_t *v, uint32_t *k)\n{ // 传入v是我们的input数组，k是key数组\n    uint32_t v0 = v[0], v1 = v[1], i; // 把v数组丢进去，分组加密\n    uint32_t sum = 0;                 // 初始化sum为0\n    uint32_t delta = 0x9e3779b9;      // 这个是特征值0x9e3779b9\n    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3]; // key固定是128bit的数组，4个uint32_t整数，每个32位，一共128位\n    for (i = 0; i < 32; i++)\n    { // 初始轮转数是32轮，但是可以自己设定，例如64轮\n        sum += delta; // 每一轮都加特征值，溢出时直接舍去溢出部分，保留4字节，也就是32位\n        v0 += ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1); // 通过对v1加密得到v0\n        v1 += ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3); // 通过对加密后的v0加密得到v1\n    } // 就这样不停地轮转32次\n    // 将加密完的数据丢出来给v数组\n    v[0] = v0;\n    v[1] = v1; // 加密结束后，将v0和v1分别存储到v数组中得到密文\n}"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1671000319375,"last_edited_time":1757512508401,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"NujM0wBJMr4I6Ad9iwx7mA,\"start\",\"end\"","n":{"NujM0wBJMr4I6Ad9iwx7mA,\"start\",\"end\"":{"s":{"x":"NujM0wBJMr4I6Ad9iwx7mA","i":[{"t":"s"},{"t":"t","i":["69UjIix2e9I1",1],"o":"start","l":38,"c":"void encrypt(uint32_t *v, uint32_t *k)"},{"t":"t","i":["69UjIix2e9I1",39],"o":["69UjIix2e9I1",38],"l":-1},{"t":"t","i":["69UjIix2e9I1",40],"o":["69UjIix2e9I1",39],"l":28,"c":"\n{ // 传入v是我们的input数组，k是key数组"},{"t":"t","i":["69UjIix2e9I1",68],"o":["69UjIix2e9I1",67],"l":-1},{"t":"t","i":["69UjIix2e9I1",69],"o":["69UjIix2e9I1",68],"l":142,"c":"\n    uint32_t v0 = v[0], v1 = v[1], i; // 把v数组丢进去，分组加密\n    uint32_t sum = 0;                 // 初始化sum为0\n    uint32_t delta = 0x9e3779b9;     "},{"t":"t","i":["69UjIix2e9I1",211],"o":["69UjIix2e9I1",210],"l":-1},{"t":"t","i":["_N-fKeC6AfC3",730],"o":["69UjIix2e9I1",211],"l":1,"c":" "},{"t":"t","i":["69UjIix2e9I1",212],"o":["69UjIix2e9I1",211],"l":19,"c":"// 这个是特征值0x9e3779b9"},{"t":"t","i":["69UjIix2e9I1",231],"o":["69UjIix2e9I1",230],"l":-1},{"t":"t","i":["69UjIix2e9I1",232],"o":["69UjIix2e9I1",231],"l":102,"c":"\n    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3]; // key固定是128bit的数组，4个uint32_t整数，每个32位，一共128位"},{"t":"t","i":["69UjIix2e9I1",334],"o":["69UjIix2e9I1",333],"l":-1},{"t":"t","i":["69UjIix2e9I1",335],"o":["69UjIix2e9I1",334],"l":29,"c":"\n    for (i = 0; i < 32; i++)"},{"t":"t","i":["69UjIix2e9I1",364],"o":["69UjIix2e9I1",363],"l":-1},{"t":"t","i":["69UjIix2e9I1",365],"o":["69UjIix2e9I1",364],"l":34,"c":"\n    { // 初始轮转数是32轮，但是可以自己设定，例如64轮"},{"t":"t","i":["69UjIix2e9I1",399],"o":["69UjIix2e9I1",398],"l":-1},{"t":"t","i":["69UjIix2e9I1",400],"o":["69UjIix2e9I1",399],"l":59,"c":"\n        sum += delta; // 每一轮都加特征值，溢出时直接舍去溢出部分，保留4字节，也就是32位"},{"t":"t","i":["69UjIix2e9I1",459],"o":["69UjIix2e9I1",458],"l":-1},{"t":"t","i":["69UjIix2e9I1",460],"o":["69UjIix2e9I1",459],"l":79,"c":"\n        v0 += ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1); // 通过对v1加密得到v0"},{"t":"t","i":["69UjIix2e9I1",539],"o":["69UjIix2e9I1",538],"l":-1},{"t":"t","i":["69UjIix2e9I1",540],"o":["69UjIix2e9I1",539],"l":83,"c":"\n        v1 += ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3); // 通过对加密后的v0加密得到v1"},{"t":"t","i":["69UjIix2e9I1",623],"o":["69UjIix2e9I1",622],"l":-1},{"t":"t","i":["69UjIix2e9I1",624],"o":["69UjIix2e9I1",623],"l":58,"c":"\n    } // 就这样不停地轮转32次\n    // 将加密完的数据丢出来给v数组\n    v[0] = v0;"},{"t":"t","i":["69UjIix2e9I1",682],"o":["69UjIix2e9I1",681],"l":-1},{"t":"t","i":["69UjIix2e9I1",683],"o":["69UjIix2e9I1",682],"l":46,"c":"\n    v[1] = v1; // 加密结束后，将v0和v1分别存储到v数组中得到密文\n}"},{"t":"t","i":["69UjIix2e9I1",729],"o":["69UjIix2e9I1",728],"l":-1},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"2bfebd76-b512-4854-ba32-c754575eb999":{"value":{"id":"2bfebd76-b512-4854-ba32-c754575eb999","version":8,"type":"text","properties":{"title":[["加密流程图\n图解符号：\n方框：相加盒。将指向该盒的变量进行相加\n圆圈：异或盒。将指向该盒的变量进行异或\n\n知道了加密，解密就很简单了，直接逆过来就是了"]]},"created_time":1671000319375,"last_edited_time":1671000420001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"sDsRtpwehx1UsH_y-slAZQ,\"start\",\"end\"","n":{"sDsRtpwehx1UsH_y-slAZQ,\"start\",\"end\"":{"s":{"x":"sDsRtpwehx1UsH_y-slAZQ","i":[{"t":"s"},{"t":"t","i":["w9zzfufrrpzY",1],"o":"start","l":75,"c":"加密流程图\n图解符号：\n方框：相加盒。将指向该盒的变量进行相加\n圆圈：异或盒。将指向该盒的变量进行异或\n\n知道了加密，解密就很简单了，直接逆过来就是了"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"423941b4-089f-4ae0-a5bd-ee32e38d92da":{"value":{"id":"423941b4-089f-4ae0-a5bd-ee32e38d92da","version":12,"type":"image","properties":{"size":[["62.3KB"]],"title":[["Untitled"]],"source":[["https://s3-us-west-2.amazonaws.com/secure.notion-static.com/dd24f283-b4a2-4ce8-820f-85b23690d6e9/Untitled.png"]]},"format":{"block_width":488,"block_height":503,"display_source":"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/dd24f283-b4a2-4ce8-820f-85b23690d6e9/Untitled.png","block_full_width":false,"block_page_width":false,"block_aspect_ratio":1.0307377049180328,"block_preserve_scale":true},"created_time":1671000420000,"last_edited_time":1671000420001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"file_ids":["dd24f283-b4a2-4ce8-820f-85b23690d6e9"],"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"6Gks0IIiehz-w4HmNnp7jw,\"start\",\"end\"","n":{"6Gks0IIiehz-w4HmNnp7jw,\"start\",\"end\"":{"s":{"x":"6Gks0IIiehz-w4HmNnp7jw","i":[{"t":"s"},{"t":"t","i":["hI2O0Idfc4T0",1],"o":"start","l":8,"c":"Untitled"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"0582cc7e-f760-4cb8-8a31-f1a5075ab943":{"value":{"id":"0582cc7e-f760-4cb8-8a31-f1a5075ab943","version":27,"type":"code","properties":{"title":[["void decrypt(uint32_t *v, uint32_t *k)\n{ // 传入v是我们的input数组，k是key数组\n    uint32_t v0 = v[0], v1 = v[1], i; // 一次加密处理2个输入的大整数\n    uint32_t sum = 0xC6EF3720;        // sum为0xC6EF3720，这个是特征值0x9e3779b9乘以32的结果\n    uint32_t delta = 0x9e3779b9;      // 这个是特征值0x9e3779b9\n    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3]; // key固定是128bit的数组，4个uint32_t整数，每个32位，一共128位\n    for (i = 0; i < 32; i++)\n    { // 初始轮转数是32轮，但是可以自己设定，例如64轮\n        v1 -= ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3); // 通过对v0解密密得到v1\n        v0 -= ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1); // 通过对解密后的v1解密得到v0\n        sum -= delta; // 每一轮都减掉特征值，溢出时直接舍去溢出部分，保留4字节，也就是32位\n    } // 就这样不停地轮转32次\n    // 将加密完的数据丢出来给v数组\n    v[0] = v0;\n    v[1] = v1; // 解密结束后，将v0和v1分别存储到v数组中得到明文\n}  //会发现真是只是倒着推一遍算法而已，轮转32次最后再次赋值即可\n"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1671000319375,"last_edited_time":1757512521730,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"EoGzdkWN71G-BdhPXj8xNA,\"start\",\"end\"","n":{"EoGzdkWN71G-BdhPXj8xNA,\"start\",\"end\"":{"s":{"x":"EoGzdkWN71G-BdhPXj8xNA","i":[{"t":"s"},{"t":"t","i":["kYcmykDJoTdZ",1],"o":"start","l":38,"c":"void decrypt(uint32_t *v, uint32_t *k)"},{"t":"t","i":["kYcmykDJoTdZ",39],"o":["kYcmykDJoTdZ",38],"l":-1},{"t":"t","i":["kYcmykDJoTdZ",40],"o":["kYcmykDJoTdZ",39],"l":28,"c":"\n{ // 传入v是我们的input数组，k是key数组"},{"t":"t","i":["kYcmykDJoTdZ",68],"o":["kYcmykDJoTdZ",67],"l":-1},{"t":"t","i":["kYcmykDJoTdZ",69],"o":["kYcmykDJoTdZ",68],"l":194,"c":"\n    uint32_t v0 = v[0], v1 = v[1], i; // 一次加密处理2个输入的大整数\n    uint32_t sum = 0xC6EF3720;        // sum为0xC6EF3720，这个是特征值0x9e3779b9乘以32的结果\n    uint32_t delta = 0x9e3779b9;      // 这个是特征值0x9e3779b9"},{"t":"t","i":["kYcmykDJoTdZ",263],"o":["kYcmykDJoTdZ",262],"l":-1},{"t":"t","i":["kYcmykDJoTdZ",264],"o":["kYcmykDJoTdZ",263],"l":102,"c":"\n    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3]; // key固定是128bit的数组，4个uint32_t整数，每个32位，一共128位"},{"t":"t","i":["kYcmykDJoTdZ",366],"o":["kYcmykDJoTdZ",365],"l":-1},{"t":"t","i":["kYcmykDJoTdZ",367],"o":["kYcmykDJoTdZ",366],"l":29,"c":"\n    for (i = 0; i < 32; i++)"},{"t":"t","i":["kYcmykDJoTdZ",396],"o":["kYcmykDJoTdZ",395],"l":-1},{"t":"t","i":["kYcmykDJoTdZ",397],"o":["kYcmykDJoTdZ",396],"l":34,"c":"\n    { // 初始轮转数是32轮，但是可以自己设定，例如64轮"},{"t":"t","i":["kYcmykDJoTdZ",431],"o":["kYcmykDJoTdZ",430],"l":-1},{"t":"t","i":["kYcmykDJoTdZ",432],"o":["kYcmykDJoTdZ",431],"l":80,"c":"\n        v1 -= ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3); // 通过对v0解密密得到v1"},{"t":"t","i":["kYcmykDJoTdZ",512],"o":["kYcmykDJoTdZ",511],"l":-1},{"t":"t","i":["kYcmykDJoTdZ",513],"o":["kYcmykDJoTdZ",512],"l":83,"c":"\n        v0 -= ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1); // 通过对解密后的v1解密得到v0"},{"t":"t","i":["kYcmykDJoTdZ",596],"o":["kYcmykDJoTdZ",595],"l":-1},{"t":"t","i":["kYcmykDJoTdZ",597],"o":["kYcmykDJoTdZ",596],"l":60,"c":"\n        sum -= delta; // 每一轮都减掉特征值，溢出时直接舍去溢出部分，保留4字节，也就是32位"},{"t":"t","i":["kYcmykDJoTdZ",657],"o":["kYcmykDJoTdZ",656],"l":-1},{"t":"t","i":["kYcmykDJoTdZ",658],"o":["kYcmykDJoTdZ",657],"l":58,"c":"\n    } // 就这样不停地轮转32次\n    // 将加密完的数据丢出来给v数组\n    v[0] = v0;"},{"t":"t","i":["kYcmykDJoTdZ",716],"o":["kYcmykDJoTdZ",715],"l":-1},{"t":"t","i":["kYcmykDJoTdZ",717],"o":["kYcmykDJoTdZ",716],"l":81,"c":"\n    v[1] = v1; // 解密结束后，将v0和v1分别存储到v数组中得到明文\n}  //会发现真是只是倒着推一遍算法而已，轮转32次最后再次赋值即可\n"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"15ab3d28-3601-40f1-9973-995499ca09a8":{"value":{"id":"15ab3d28-3601-40f1-9973-995499ca09a8","version":5,"type":"text","properties":{"title":[["上面的这是标准的 tea 算法，\n然后我们可以进一步魔改如下"]]},"created_time":1671000319375,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"INRKcGswCFRd4seyS0S_-A,\"start\",\"end\"","n":{"INRKcGswCFRd4seyS0S_-A,\"start\",\"end\"":{"s":{"x":"INRKcGswCFRd4seyS0S_-A","i":[{"t":"s"},{"t":"t","i":["Wwv13VxRRTD8",1],"o":"start","l":30,"c":"上面的这是标准的 tea 算法，\n然后我们可以进一步魔改如下"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"a3af596f-247a-4e34-b037-59eb2083c38e":{"value":{"id":"a3af596f-247a-4e34-b037-59eb2083c38e","version":7,"type":"code","properties":{"title":[["#include <stdio.h>\n#include <stdint.h>\n\n//加密函数\nvoid encrypt(uint32_t* v, uint32_t* k) {\n    uint32_t v0 = v[0], v1 = v[1], sum = 0, i;\n    uint32_t delta = 0x1a2b3c4d;                     /*把标准的魔数我魔改成了0x1a2b3c4d*/\n    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];\n    for (i = 0; i < 64; i++) {\n        sum += delta;\n        v0 += ((v1 << 6) + k0) ^ ((v1 + sum)^0x66) ^ ((((v1 >> 9) + k1)^0x10));\n        v1 += ((v0 << 6) + k2) ^ ((v0 + sum)^0x88) ^ ((((v0 >> 9) + k3)^0x20));\n    }\n    v[0] = v0; v[1] = v1;\n}\n//解密函数\n void decrypt(uint32_t* v, uint32_t* k) {\n    uint32_t v0 = v[0], v1 = v[1], sum = 0x8acf1340, i;\n    uint32_t delta = 0x1a2b3c4d;\n    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];\n    for (i = 0; i < 64; i++) {\n        v1 -= ((v0 << 6) + k2) ^ ((v0 + sum)^0x88) ^ ((((v0 >> 9) + k3)^0x20));\n        v0 -= ((v1 << 6) + k0) ^ ((v1 + sum)^0x66) ^ ((((v1 >> 9) + k1)^0x10));\n        sum -= delta;\n    }\n    v[0] = v0; v[1] = v1;\n}\n\nint main()\n{\n\n    uint32_t v[2] = { 6666,8888 }, k[4] = { 1234,4321,1234,4321 };\n    // v为要加密的数据是两个32位无符号整数\n    // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位\n    printf(\"old data：%u %u\\\\n\", v[0], v[1]);\n    encrypt(v, k);\n    printf(\"crypted data：%u %u\\\\n\", v[0], v[1]);\n    decrypt(v, k);\n    printf(\"解密后的数据：%u %u\\\\n\", v[0], v[1]);\n    return 0;\n}\n"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1671000319375,"last_edited_time":1671000420001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"Mdy0mSXOG-VJweNaDlbBHQ,\"start\",\"end\"","n":{"Mdy0mSXOG-VJweNaDlbBHQ,\"start\",\"end\"":{"s":{"x":"Mdy0mSXOG-VJweNaDlbBHQ","i":[{"t":"s"},{"t":"t","i":["AMuijyjIhK-I",1],"o":"start","l":1299,"c":"#include <stdio.h>\n#include <stdint.h>\n\n//加密函数\nvoid encrypt(uint32_t* v, uint32_t* k) {\n    uint32_t v0 = v[0], v1 = v[1], sum = 0, i;\n    uint32_t delta = 0x1a2b3c4d;                     /*把标准的魔数我魔改成了0x1a2b3c4d*/\n    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];\n    for (i = 0; i < 64; i++) {\n        sum += delta;\n        v0 += ((v1 << 6) + k0) ^ ((v1 + sum)^0x66) ^ ((((v1 >> 9) + k1)^0x10));\n        v1 += ((v0 << 6) + k2) ^ ((v0 + sum)^0x88) ^ ((((v0 >> 9) + k3)^0x20));\n    }\n    v[0] = v0; v[1] = v1;\n}\n//解密函数\n void decrypt(uint32_t* v, uint32_t* k) {\n    uint32_t v0 = v[0], v1 = v[1], sum = 0x8acf1340, i;\n    uint32_t delta = 0x1a2b3c4d;\n    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];\n    for (i = 0; i < 64; i++) {\n        v1 -= ((v0 << 6) + k2) ^ ((v0 + sum)^0x88) ^ ((((v0 >> 9) + k3)^0x20));\n        v0 -= ((v1 << 6) + k0) ^ ((v1 + sum)^0x66) ^ ((((v1 >> 9) + k1)^0x10));\n        sum -= delta;\n    }\n    v[0] = v0; v[1] = v1;\n}\n\nint main()\n{\n\n    uint32_t v[2] = { 6666,8888 }, k[4] = { 1234,4321,1234,4321 };\n    // v为要加密的数据是两个32位无符号整数\n    // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位\n    printf(\"old data：%u %u\\\\n\", v[0], v[1]);\n    encrypt(v, k);\n    printf(\"crypted data：%u %u\\\\n\", v[0], v[1]);\n    decrypt(v, k);\n    printf(\"解密后的数据：%u %u\\\\n\", v[0], v[1]);\n    return 0;\n}\n"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"074c386c-53c5-4cfe-958d-43debf8e6f26":{"value":{"id":"074c386c-53c5-4cfe-958d-43debf8e6f26","version":5,"type":"text","properties":{"title":[["这里改变特征值，然后加密算法微调，加了异或而已，就完成了魔改工作"]]},"created_time":1671000319375,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"kmJDbocUuaCDy5fPJr8HTw,\"start\",\"end\"","n":{"kmJDbocUuaCDy5fPJr8HTw,\"start\",\"end\"":{"s":{"x":"kmJDbocUuaCDy5fPJr8HTw","i":[{"t":"s"},{"t":"t","i":["xYUqTwPhXXyg",1],"o":"start","l":32,"c":"这里改变特征值，然后加密算法微调，加了异或而已，就完成了魔改工作"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"ba077cd5-bf8b-47d6-8727-8f27d1f1e709":{"value":{"id":"ba077cd5-bf8b-47d6-8727-8f27d1f1e709","version":5,"type":"sub_header","properties":{"title":[["Xtea"]]},"created_time":1671000319375,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"Xw8yrZt3P65iveN87j-4cA,\"start\",\"end\"","n":{"Xw8yrZt3P65iveN87j-4cA,\"start\",\"end\"":{"s":{"x":"Xw8yrZt3P65iveN87j-4cA","i":[{"t":"s"},{"t":"t","i":["wDtGaU-GS8UD",1],"o":"start","l":4,"c":"Xtea"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"a3728e08-9f7b-4448-afc3-2365fc3961b1":{"value":{"id":"a3728e08-9f7b-4448-afc3-2365fc3961b1","version":9,"type":"text","properties":{"title":[["一样，上xtea算法代码"]]},"created_time":1671000319375,"last_edited_time":1671000420001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"c4_K7tjuFVhPvTKI1yG9bA,\"start\",\"end\"","n":{"c4_K7tjuFVhPvTKI1yG9bA,\"start\",\"end\"":{"s":{"x":"c4_K7tjuFVhPvTKI1yG9bA","i":[{"t":"s"},{"t":"t","i":["2gS-Jx8B61pf",1],"o":"start","l":12,"c":"一样，上xtea算法代码"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"81ee5f17-49b2-4ea9-b384-3d53a057aa66":{"value":{"id":"81ee5f17-49b2-4ea9-b384-3d53a057aa66","version":50,"type":"code","properties":{"title":[["#include <stdio.h>\n#include <stdint.h>\n\n\n// 传入v是我们的input数组，k是key数组,r是轮转数\nvoid encrypt(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4])\n{\n    unsigned int i;\n    uint32_t v0 = v[0], v1 = v[1];   // 赋值v数组的两个元素给v0和v1\n    uint32_t delta = 0x9E3779B9;     // 这个是特征值0x9e3779b9\n    uint32_t sum = 0;                // 初始化sum为0\n    for (i = 0; i < num_rounds; i++) // 循环轮转数次\n    {\n        v0 += (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]);         // 这里的sum & 3是顺着取key数组元素,建议动调看看，取值顺序是0,1,2,3\n        sum += delta;                                                        // 每一轮都加特征值，溢出时直接舍去溢出部分，保留4字节，也就是32位\n        v1 += (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum >> 11) & 3]); // 这里的sum >> 11) & 3是倒着取key数组的元素,建议动调看看，取值顺序是3,2,1,0\n    }\n    // 将加密后的数据赋值给v数组\n    v[0] = v0;\n    v[1] = v1;\n}\n// 加密过程发现不同之处在于，加密算法变了，key的利用不同，传入的参数多了个轮转数的选择，其他的还是变化不大，还是一样可以逆推\nvoid decrypt(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4])\n{\n    unsigned int i;\n    uint32_t v0 = v[0], v1 = v[1];     // 赋值v数组的两个元素给v0和v1\n    uint32_t delta = 0x9E3779B9;       // 这个是特征值0x9e3779b9\n    uint32_t sum = delta * num_rounds; // 和tea算法一样的,sum=0x9e3779b9*32=0xC6EF3720\n    for (i = 0; i < num_rounds; i++)   // 循环轮转数次\n    {\n        v1 -= (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum >> 11) & 3]);// 这里的sum & 3是顺着取key数组元素,建议动调看看，取值顺序是0,1,2,3\n        sum -= delta;\n        v0 -= (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]); // 这里的sum >> 11) & 3是倒着取key数组的元素,建议动调看看，取值顺序是3,2,1,0\n    }\n    // 将加密后的数据赋值给v数组\n    v[0] = v0;\n    v[1] = v1;\n}\n\nint main()\n{\n    //data1和data2是我们要加密的数据\n    uint32_t data1, data2;\n    // 从键盘输入要加密的数据\n    scanf(\"%u %u\", &data1, &data2);\n    // v为要加密的数据是两个32位无符号整数\n    uint32_t v[2] = {data1, data2};\n    // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位\n    uint32_t const k[4] = {2, 2, 3, 4};\n    unsigned int r = 32; // num_rounds建议取值为32\n    printf(\"加密前原始数据：%u %u\\\\n\", v[0], v[1]);\n    encrypt(r, v, k);\n    printf(\"加密后的数据：%u %u\\\\n\", v[0], v[1]);\n    decrypt(r, v, k);\n    printf(\"解密后的数据：%u %u\\\\n\", v[0], v[1]);\n    return 0;\n}\n\n"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1671000319375,"last_edited_time":1671000480001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"mzrbt5A4cPifTFf1uVdLRQ,\"start\",\"end\"","n":{"mzrbt5A4cPifTFf1uVdLRQ,\"start\",\"end\"":{"s":{"x":"mzrbt5A4cPifTFf1uVdLRQ","i":[{"t":"s"},{"t":"t","i":["GJn9Mu1Rzl1R",1],"o":"start","l":2056,"c":"#include <stdio.h>\n#include <stdint.h>\n\n\n// 传入v是我们的input数组，k是key数组,r是轮转数\nvoid encrypt(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4])\n{\n    unsigned int i;\n    uint32_t v0 = v[0], v1 = v[1];   // 赋值v数组的两个元素给v0和v1\n    uint32_t delta = 0x9E3779B9;     // 这个是特征值0x9e3779b9\n    uint32_t sum = 0;                // 初始化sum为0\n    for (i = 0; i < num_rounds; i++) // 循环轮转数次\n    {\n        v0 += (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]);         // 这里的sum & 3是顺着取key数组元素,建议动调看看，取值顺序是0,1,2,3\n        sum += delta;                                                        // 每一轮都加特征值，溢出时直接舍去溢出部分，保留4字节，也就是32位\n        v1 += (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum >> 11) & 3]); // 这里的sum >> 11) & 3是倒着取key数组的元素,建议动调看看，取值顺序是3,2,1,0\n    }\n    // 将加密后的数据赋值给v数组\n    v[0] = v0;\n    v[1] = v1;\n}\n// 加密过程发现不同之处在于，加密算法变了，key的利用不同，传入的参数多了个轮转数的选择，其他的还是变化不大，还是一样可以逆推\nvoid decrypt(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4])\n{\n    unsigned int i;\n    uint32_t v0 = v[0], v1 = v[1];     // 赋值v数组的两个元素给v0和v1\n    uint32_t delta = 0x9E3779B9;       // 这个是特征值0x9e3779b9\n    uint32_t sum = delta * num_rounds; // 和tea算法一样的,sum=0x9e3779b9*32=0xC6EF3720\n    for (i = 0; i < num_rounds; i++)   // 循环轮转数次\n    {\n        v1 -= (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum >> 11) & 3]);// 这里的sum & 3是顺着取key数组元素,建议动调看看，取值顺序是0,1,2,3\n        sum -= delta;\n        v0 -= (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]); // 这里的sum >> 11) & 3是倒着取key数组的元素,建议动调看看，取值顺序是3,2,1,0\n    }\n    // 将加密后的数据赋值给v数组\n    v[0] = v0;\n    v[1] = v1;\n}\n\nint main()\n{\n    //data1和data2是我们要加密的数据\n    uint32_t data1, data2;\n    // 从键盘输入要加密的数据\n    scanf(\"%u %u\", &data1, &data2);\n    // v为要加密的数据是两个32位无符号整数\n    uint32_t v[2] = {data1, data2};\n    // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位\n    uint32_t const k[4] = {2, 2, 3, 4};\n    unsigned int r = 32; // num_rounds建议取值为32\n    printf(\"加密前原始数据：%u %u\\\\n\", v[0], v[1]);\n    encrypt(r, v, k);\n    printf(\"加密后的数据：%u %u\\\\n\", v[0], v[1]);\n    decrypt(r, v, k);\n    printf(\"解密后的数据：%u %u\\\\n\", v[0], v[1]);\n    return 0;\n}\n\n"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"5fcb45f4-4ac5-4522-b37c-80cca58bfba3":{"value":{"id":"5fcb45f4-4ac5-4522-b37c-80cca58bfba3","version":5,"type":"text","properties":{"title":[["这里主要需要说的是 "],["key[sum & 3]",[["c"]]],["，"],["key[(sum >> 11) & 3]",[["c"]]],[", 建议动调看一下，这里其实就是简单的取出 key 数组的值"]]},"created_time":1671000319375,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"Gi348Obl5hc-QRNj0TaEuA,\"start\",\"end\"","n":{"Gi348Obl5hc-QRNj0TaEuA,\"start\",\"end\"":{"s":{"x":"Gi348Obl5hc-QRNj0TaEuA","i":[{"t":"s"},{"t":"t","i":["4Dm5of04S_Yh",1],"o":"start","l":10,"c":"这里主要需要说的是 "},{"t":"t","i":["4Dm5of04S_Yh",11],"o":["4Dm5of04S_Yh",10],"l":12,"c":"key[sum & 3]","b":[{"t":"a","x":"Gi348Obl5hc-QRNj0TaEuA","l":"","i":["4Dm5of04S_Yh",74],"s":{"i":["4Dm5of04S_Yh",11],"a":"b"},"e":{"i":["4Dm5of04S_Yh",22],"a":"a"},"a":["c"]}],"a":[]},{"t":"t","i":["4Dm5of04S_Yh",23],"o":["4Dm5of04S_Yh",22],"l":1,"c":"，"},{"t":"t","i":["4Dm5of04S_Yh",24],"o":["4Dm5of04S_Yh",23],"l":20,"c":"key[(sum >> 11) & 3]","b":[{"t":"a","x":"Gi348Obl5hc-QRNj0TaEuA","l":"","i":["4Dm5of04S_Yh",75],"s":{"i":["4Dm5of04S_Yh",24],"a":"b"},"e":{"i":["4Dm5of04S_Yh",43],"a":"a"},"a":["c"]}],"a":[]},{"t":"t","i":["4Dm5of04S_Yh",44],"o":["4Dm5of04S_Yh",43],"l":30,"c":", 建议动调看一下，这里其实就是简单的取出 key 数组的值"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"efc611a3-92b2-44f2-a7af-e6855027fafe":{"value":{"id":"efc611a3-92b2-44f2-a7af-e6855027fafe","version":7,"type":"text","properties":{"title":[["Xtea 考的不是很多，我们只需要记住在 tea 算法的基础上，再记住特征，"],["key[sum&3]",[["c"]]],["，"],["key[(sum >> 11) & 3 ",[["c"]]],[" 还有轮转数的选择，就可以认出 Xtea算法了"]]},"created_time":1671000319376,"last_edited_time":1671000480001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"15FadHEDv1ZK_brSgMzdSA,\"start\",\"end\"","n":{"15FadHEDv1ZK_brSgMzdSA,\"start\",\"end\"":{"s":{"x":"15FadHEDv1ZK_brSgMzdSA","i":[{"t":"s"},{"t":"t","i":["tM22dHb4BYYA",1],"o":"start","l":38,"c":"Xtea 考的不是很多，我们只需要记住在 tea 算法的基础上，再记住特征，"},{"t":"t","i":["tM22dHb4BYYA",39],"o":["tM22dHb4BYYA",38],"l":10,"c":"key[sum&3]","b":[{"t":"a","x":"15FadHEDv1ZK_brSgMzdSA","l":"","i":["tM22dHb4BYYA",93],"s":{"i":["tM22dHb4BYYA",39],"a":"b"},"e":{"i":["tM22dHb4BYYA",48],"a":"a"},"a":["c"]}],"a":[]},{"t":"t","i":["tM22dHb4BYYA",49],"o":["tM22dHb4BYYA",48],"l":1,"c":"，"},{"t":"t","i":["tM22dHb4BYYA",50],"o":["tM22dHb4BYYA",49],"l":20,"c":"key[(sum >> 11) & 3 ","b":[{"t":"a","x":"15FadHEDv1ZK_brSgMzdSA","l":"","i":["tM22dHb4BYYA",94],"s":{"i":["tM22dHb4BYYA",50],"a":"b"},"e":{"i":["tM22dHb4BYYA",69],"a":"a"},"a":["c"]}],"a":[]},{"t":"t","i":["tM22dHb4BYYA",70],"o":["tM22dHb4BYYA",69],"l":23,"c":" 还有轮转数的选择，就可以认出 Xtea算法了"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"368127f2-0d3c-4a41-8b39-21854a2b4636":{"value":{"id":"368127f2-0d3c-4a41-8b39-21854a2b4636","version":5,"type":"text","properties":{"title":[["加密流程图:\n图解符号：\n方框：相加盒。将指向该盒的变量进行相加\n圆圈：异或盒。将指向该盒的变量进行异或"]]},"created_time":1671000319376,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"MaFEAwS_RadLqD7B9Mu-Aw,\"start\",\"end\"","n":{"MaFEAwS_RadLqD7B9Mu-Aw,\"start\",\"end\"":{"s":{"x":"MaFEAwS_RadLqD7B9Mu-Aw","i":[{"t":"s"},{"t":"t","i":["RVqMHNROSwrz",1],"o":"start","l":52,"c":"加密流程图:\n图解符号：\n方框：相加盒。将指向该盒的变量进行相加\n圆圈：异或盒。将指向该盒的变量进行异或"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"9b7d3e5c-0234-47d0-a519-429db1dcd1b7":{"value":{"id":"9b7d3e5c-0234-47d0-a519-429db1dcd1b7","version":4,"type":"image","properties":{"source":[["https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/20221214134342.png"]]},"created_time":1671000319376,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"Rq4Jd5f2kyHvJmFqMggu5w,\"start\",\"end\"","n":{"Rq4Jd5f2kyHvJmFqMggu5w,\"start\",\"end\"":{"s":{"x":"Rq4Jd5f2kyHvJmFqMggu5w","i":[{"t":"s"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"e631b258-3f61-41c1-8c7e-e54ec8beef7b":{"value":{"id":"e631b258-3f61-41c1-8c7e-e54ec8beef7b","version":5,"type":"sub_header","properties":{"title":[["Xxtea"]]},"created_time":1671000319382,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"6a8LmiG0ixvlUyQRShmTFw,\"start\",\"end\"","n":{"6a8LmiG0ixvlUyQRShmTFw,\"start\",\"end\"":{"s":{"x":"6a8LmiG0ixvlUyQRShmTFw","i":[{"t":"s"},{"t":"t","i":["K6fYstXaDrQK",1],"o":"start","l":5,"c":"Xxtea"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"c46ddf4e-9eca-4c8d-8cc8-e01083449b5d":{"value":{"id":"c46ddf4e-9eca-4c8d-8cc8-e01083449b5d","version":5,"type":"text","properties":{"title":[["一样上代码"]]},"created_time":1671000319382,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"wV2lTTvLJ4Sh-1CEQ3A9tg,\"start\",\"end\"","n":{"wV2lTTvLJ4Sh-1CEQ3A9tg,\"start\",\"end\"":{"s":{"x":"wV2lTTvLJ4Sh-1CEQ3A9tg","i":[{"t":"s"},{"t":"t","i":["bhgDLwVx7_ih",1],"o":"start","l":5,"c":"一样上代码"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"cf400c38-45ee-4d85-b6a5-caf983ee2be4":{"value":{"id":"cf400c38-45ee-4d85-b6a5-caf983ee2be4","version":7,"type":"code","properties":{"title":[["#include <stdio.h>\n#include <stdint.h>\n#define DELTA 0x9e3779b9\n\nvoid xxtea(uint32_t *v, int n, uint32_t const key[4]) // v为要加密的数组，n为v的长度，key为密钥，一般为4个数，也可以是其他数，但是要保证key的长度大于n，否则会出错，这里的n是指v的长度，不是key的长度，key的长度是4，也就是说v的长度最大为4，否则会出错\n{\n    uint32_t y, z, sum;    // y,z为临时变量，sum为轮转数\n    unsigned i, rounds, e; // i为循环变量，rounds为轮转数，e为特征值\n    if (n > 1)             // n作为加解密的选择，正数为加密，负数为解密\n    {\n        rounds = 6 + 52 / n; // 轮转数的选择，是个特征值：6+52/n\n        sum = 0;             // 初始化sum为0\n        z = v[n - 1];        // z为v数组最后一个元素\n        do\n        {\n            sum += DELTA;               // 开始加密\n            e = (sum >> 2) & 3;         // 通过sum得到e，也算是个特征值\n            for (i = 0; i < n - 1; i++) // 轮转次数\n            {\n                // 先取出v[1]，然后通过v[0]和v[2]加密得到v[1]，然后通过v[1]和v[3]加密得到v[2]，以此类推\n                y = v[i + 1];\n                v[i] += (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(i & 3) ^ e] ^ z))); // 加密公式\n                z = v[i];\n                // 细细分析就会知道，首先通过v[n-1]和v[1]进行加密得到v[0]，然后通过加密完的v[0]和v[2]加密得到v[1]就会发现规律了\n                // 其实就是3个数为一组，通过左右两个数加密得到中间的数\n                // 注意运算结束:这里只会运算到v[n-2],也就是说是v数组的倒数第二个元素\n            }\n            y = v[0];\n            v[n - 1] += (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(i & 3) ^ e] ^ z))); // 加密公式\n            z = v[n - 1];                                                                                 // 这里是为了下一轮加密做准备\n        }                                                                                                 // 第一轮结束，每个数都加密了一遍\n        while (--rounds);                                                                                 // 执行rounds轮，加密完全\n    }\n    else if (n < -1) // 当负数时就是解密\n    {\n        n = -n;               // 首先把负数转成正数\n        rounds = 6 + 52 / n;  // 确定轮转数\n        sum = rounds * DELTA; // 根据轮转数计算sum\n        y = v[0];             // y为v数组的第一个元素\n        do\n        {\n            e = (sum >> 2) & 3;         // 通过sum得到e，也算是个特征值\n            for (i = n - 1; i > 0; i--) // 逆序倒推\n            {\n                // 先取出v[n-2]，然后通过v[n-1]和v[n-3]解密得到v[n-2]，然后通过v[n-2]和v[n-4]解密得到v[n-3]，以此类推\n                z = v[i - 1];\n                v[i] -= (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(i & 3) ^ e] ^ z))); // 解密公式\n                y = v[i];\n                // 只会解密到v[1],也就是说是v数组的整数第二个元素\n            }\n            z = v[n - 1];                                                                             // 这里是为了下一轮解密做准备\n            v[0] -= (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(i & 3) ^ e] ^ z))); // 解密公式\n            y = v[0];                                                                                 // 最后一个数解密完毕\n            sum -= DELTA;                                                                             // 每轮结束，sum减去DELTA\n        } while (--rounds);\n    }\n}\n\nint main()\n{\n    // v为要加密的数据是两个32位无符号整数\n    uint32_t v[4] = {1, 12, 123, 1234};\n    // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位\n    uint32_t const k[4] = {1234, 4321, 1314, 5210};\n    int n = 4; // n的绝对值表示v的长度，取正表示加密，取负表示解密\n    printf(\"加密前原始数据：%u %u %u %u\\\\n\", v[0], v[1], v[2], v[3]);\n    xxtea(v, n, k);\n    printf(\"加密后的数据：%u %u %u %u\\\\n\", v[0], v[1], v[2], v[3]);\n    xxtea(v, -n, k);\n    printf(\"解密后的数据：%u %u %u %u\\\\n\", v[0], v[1], v[2], v[3]);\n    return 0;\n}\n\n"]],"language":[["C"]]},"format":{"code_wrap":true},"created_time":1671000319383,"last_edited_time":1671000480001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"lvQW7aNEFZlyzAmnWL_Wnw,\"start\",\"end\"","n":{"lvQW7aNEFZlyzAmnWL_Wnw,\"start\",\"end\"":{"s":{"x":"lvQW7aNEFZlyzAmnWL_Wnw","i":[{"t":"s"},{"t":"t","i":["KPKH1KTRRW5B",1],"o":"start","l":3314,"c":"#include <stdio.h>\n#include <stdint.h>\n#define DELTA 0x9e3779b9\n\nvoid xxtea(uint32_t *v, int n, uint32_t const key[4]) // v为要加密的数组，n为v的长度，key为密钥，一般为4个数，也可以是其他数，但是要保证key的长度大于n，否则会出错，这里的n是指v的长度，不是key的长度，key的长度是4，也就是说v的长度最大为4，否则会出错\n{\n    uint32_t y, z, sum;    // y,z为临时变量，sum为轮转数\n    unsigned i, rounds, e; // i为循环变量，rounds为轮转数，e为特征值\n    if (n > 1)             // n作为加解密的选择，正数为加密，负数为解密\n    {\n        rounds = 6 + 52 / n; // 轮转数的选择，是个特征值：6+52/n\n        sum = 0;             // 初始化sum为0\n        z = v[n - 1];        // z为v数组最后一个元素\n        do\n        {\n            sum += DELTA;               // 开始加密\n            e = (sum >> 2) & 3;         // 通过sum得到e，也算是个特征值\n            for (i = 0; i < n - 1; i++) // 轮转次数\n            {\n                // 先取出v[1]，然后通过v[0]和v[2]加密得到v[1]，然后通过v[1]和v[3]加密得到v[2]，以此类推\n                y = v[i + 1];\n                v[i] += (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(i & 3) ^ e] ^ z))); // 加密公式\n                z = v[i];\n                // 细细分析就会知道，首先通过v[n-1]和v[1]进行加密得到v[0]，然后通过加密完的v[0]和v[2]加密得到v[1]就会发现规律了\n                // 其实就是3个数为一组，通过左右两个数加密得到中间的数\n                // 注意运算结束:这里只会运算到v[n-2],也就是说是v数组的倒数第二个元素\n            }\n            y = v[0];\n            v[n - 1] += (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(i & 3) ^ e] ^ z))); // 加密公式\n            z = v[n - 1];                                                                                 // 这里是为了下一轮加密做准备\n        }                                                                                                 // 第一轮结束，每个数都加密了一遍\n        while (--rounds);                                                                                 // 执行rounds轮，加密完全\n    }\n    else if (n < -1) // 当负数时就是解密\n    {\n        n = -n;               // 首先把负数转成正数\n        rounds = 6 + 52 / n;  // 确定轮转数\n        sum = rounds * DELTA; // 根据轮转数计算sum\n        y = v[0];             // y为v数组的第一个元素\n        do\n        {\n            e = (sum >> 2) & 3;         // 通过sum得到e，也算是个特征值\n            for (i = n - 1; i > 0; i--) // 逆序倒推\n            {\n                // 先取出v[n-2]，然后通过v[n-1]和v[n-3]解密得到v[n-2]，然后通过v[n-2]和v[n-4]解密得到v[n-3]，以此类推\n                z = v[i - 1];\n                v[i] -= (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(i & 3) ^ e] ^ z))); // 解密公式\n                y = v[i];\n                // 只会解密到v[1],也就是说是v数组的整数第二个元素\n            }\n            z = v[n - 1];                                                                             // 这里是为了下一轮解密做准备\n            v[0] -= (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(i & 3) ^ e] ^ z))); // 解密公式\n            y = v[0];                                                                                 // 最后一个数解密完毕\n            sum -= DELTA;                                                                             // 每轮结束，sum减去DELTA\n        } while (--rounds);\n    }\n}\n\nint main()\n{\n    // v为要加密的数据是两个32位无符号整数\n    uint32_t v[4] = {1, 12, 123, 1234};\n    // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位\n    uint32_t const k[4] = {1234, 4321, 1314, 5210};\n    int n = 4; // n的绝对值表示v的长度，取正表示加密，取负表示解密\n    printf(\"加密前原始数据：%u %u %u %u\\\\n\", v[0], v[1], v[2], v[3]);\n    xxtea(v, n, k);\n    printf(\"加密后的数据：%u %u %u %u\\\\n\", v[0], v[1], v[2], v[3]);\n    xxtea(v, -n, k);\n    printf(\"解密后的数据：%u %u %u %u\\\\n\", v[0], v[1], v[2], v[3]);\n    return 0;\n}\n\n"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"c9288bcc-9736-46ff-bd28-5c515492384b":{"value":{"id":"c9288bcc-9736-46ff-bd28-5c515492384b","version":5,"type":"text","properties":{"title":[["这里说一下，注意注释里面写的特征值，然后可以根据特征值识别 xxtea 算法，然后加密细节强烈建议动调一下，你就会明白原理了，光看代码是没用的"]]},"created_time":1671000319383,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"2_jAJdQFJxLMlKSmm_TJnQ,\"start\",\"end\"","n":{"2_jAJdQFJxLMlKSmm_TJnQ,\"start\",\"end\"":{"s":{"x":"2_jAJdQFJxLMlKSmm_TJnQ","i":[{"t":"s"},{"t":"t","i":["GWyL2WnPnZlf",1],"o":"start","l":71,"c":"这里说一下，注意注释里面写的特征值，然后可以根据特征值识别 xxtea 算法，然后加密细节强烈建议动调一下，你就会明白原理了，光看代码是没用的"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"3d620b49-c5ad-4d76-9a1a-62c2ec2dfc05":{"value":{"id":"3d620b49-c5ad-4d76-9a1a-62c2ec2dfc05","version":5,"type":"text","properties":{"title":[["加密流程图:\n图解符号：\n方框：相加盒。将指向该盒的变量进行相加\n圆圈：异或盒。将指向该盒的变量进行异或"]]},"created_time":1671000319383,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"A66eCgCGvtkw6kRbMTNnCQ,\"start\",\"end\"","n":{"A66eCgCGvtkw6kRbMTNnCQ,\"start\",\"end\"":{"s":{"x":"A66eCgCGvtkw6kRbMTNnCQ","i":[{"t":"s"},{"t":"t","i":["0MljBlEijyEL",1],"o":"start","l":52,"c":"加密流程图:\n图解符号：\n方框：相加盒。将指向该盒的变量进行相加\n圆圈：异或盒。将指向该盒的变量进行异或"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"8bce3fc7-eea7-447c-b630-4a409ba09b45":{"value":{"id":"8bce3fc7-eea7-447c-b630-4a409ba09b45","version":5,"type":"sub_header","properties":{"title":[["总结"]]},"created_time":1671000319383,"last_edited_time":1671000300001,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"uPCvnb41CXYejtHI26yrsw,\"start\",\"end\"","n":{"uPCvnb41CXYejtHI26yrsw,\"start\",\"end\"":{"s":{"x":"uPCvnb41CXYejtHI26yrsw","i":[{"t":"s"},{"t":"t","i":["h7mFehK_vYt4",1],"o":"start","l":2,"c":"总结"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"d30227e1-54dc-4d5b-90f1-64da4d22042b":{"value":{"id":"d30227e1-54dc-4d5b-90f1-64da4d22042b","version":12,"type":"text","properties":{"title":[["知道加密原理，才能应对任何魔改，只有自己乱改，才能逆向出别人的奇淫技巧魔改，标准的 tea 系列算法现在已经被很多密码工具箱集成了，python也有一个tea系列算法加解密库"]]},"created_time":1671000319383,"last_edited_time":1757512643014,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"gKUjTDSPSDUj6eR9do4DDQ,\"start\",\"end\"","n":{"gKUjTDSPSDUj6eR9do4DDQ,\"start\",\"end\"":{"s":{"x":"gKUjTDSPSDUj6eR9do4DDQ","i":[{"t":"s"},{"t":"t","i":["MLl98CQ9Kjr2",1],"o":"start","l":72,"c":"知道加密原理，才能应对任何魔改，只有自己乱改，才能逆向出别人的奇淫技巧魔改，标准的 tea 系列算法现在已经被很多密码工具箱集成了，python"},{"t":"t","i":["MLl98CQ9Kjr2",73],"o":["MLl98CQ9Kjr2",72],"l":-1},{"t":"t","i":["MLl98CQ9Kjr2",74],"o":["MLl98CQ9Kjr2",73],"l":4,"c":"也有一个"},{"t":"t","i":["MLl98CQ9Kjr2",78],"o":["MLl98CQ9Kjr2",77],"l":-1},{"t":"t","i":["MLl98CQ9Kjr2",79],"o":["MLl98CQ9Kjr2",78],"l":3,"c":"tea"},{"t":"t","i":["MLl98CQ9Kjr2",82],"o":["MLl98CQ9Kjr2",81],"l":-1},{"t":"t","i":["MLl98CQ9Kjr2",83],"o":["MLl98CQ9Kjr2",82],"l":8,"c":"系列算法加解密库"},{"t":"e"}],"l":""},"c":["ppKHOJLQOnld5Jx-hV0MhA,[\"_N-fKeC6AfC3\",72],\"end\""]},"ppKHOJLQOnld5Jx-hV0MhA,[\"_N-fKeC6AfC3\",72],\"end\"":{"s":{"x":"ppKHOJLQOnld5Jx-hV0MhA","i":[{"t":"p","i":["_N-fKeC6AfC3",72],"o":"start"},{"t":"t","i":["p3edFYvrF8nk",1],"o":"start","l":-51},{"t":"e"}],"l":"l"},"c":[]}}}}},"role":"reader"},"26ab67db-fc9a-8022-aa9e-d7ca6ae794fe":{"value":{"id":"26ab67db-fc9a-8022-aa9e-d7ca6ae794fe","version":13,"type":"image","properties":{"size":[["179.4 KB"]],"title":[["2025-09-10-21-56-43@2x.png"]],"source":[["attachment:406036a4-b760-405e-a538-bc37189dfc77:2025-09-10-21-56-432x.png"]]},"format":{"block_width":561.9921875,"display_source":"attachment:406036a4-b760-405e-a538-bc37189dfc77:2025-09-10-21-56-432x.png","block_full_width":false,"block_page_width":true,"block_aspect_ratio":1.2327790973871735,"block_preserve_scale":true},"created_time":1757512613236,"last_edited_time":1757512626089,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"file_ids":["406036a4-b760-405e-a538-bc37189dfc77"],"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"BVZzpu1Zz9PwrX7vPThr1A,\"start\",\"end\"","n":{"BVZzpu1Zz9PwrX7vPThr1A,\"start\",\"end\"":{"s":{"x":"BVZzpu1Zz9PwrX7vPThr1A","i":[{"t":"s"},{"t":"t","i":["_N-fKeC6AfC3",1],"o":"start","l":26,"c":"2025-09-10-21-56-43@2x.png"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"},"26ab67db-fc9a-80d5-aa11-fddab4d85a01":{"value":{"id":"26ab67db-fc9a-80d5-aa11-fddab4d85a01","version":3,"type":"text","created_time":1757512629694,"last_edited_time":1757512629695,"parent_id":"c9360c01-070f-4b23-ae03-4e435318a94b","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","crdt_format_version":1,"crdt_data":{"title":{"r":"ehLfz-HYtrsTQy0u8AQsEA,\"start\",\"end\"","n":{"ehLfz-HYtrsTQy0u8AQsEA,\"start\",\"end\"":{"s":{"x":"ehLfz-HYtrsTQy0u8AQsEA","i":[{"t":"s"},{"t":"e"}],"l":""},"c":[]}}}}},"role":"reader"}},"collection":{"210b67db-fc9a-8121-bebe-000bb39448db":{"value":{"id":"210b67db-fc9a-8121-bebe-000bb39448db","version":109,"name":[["安全沉思录"]],"description":[["记录所思"]],"schema":{"@NcA":{"name":"password","type":"text"},"Dj]h":{"name":"icon","type":"text"},"NX\\Q":{"name":"date","type":"date","date_format":"YYYY/MM/DD"},"`gQ~":{"name":"type","type":"select","options":[{"id":"5aff2f95-fd1e-489b-8840-bf10bc9519cb","color":"purple","value":"Post","collectionIds":["210b67db-fc9a-8121-bebe-000bb39448db"]},{"id":"374d2bc6-a144-4832-8ca4-474aaae0ea1f","color":"orange","value":"Page","collectionIds":["210b67db-fc9a-8121-bebe-000bb39448db"]},{"id":"95b7fea5-98b3-476e-892f-79e8f36d0633","color":"brown","value":"Notice","collectionIds":["210b67db-fc9a-8121-bebe-000bb39448db"]},{"id":"2287395b-9f64-4852-b46f-ff3df4b4acef","color":"yellow","value":"Menu","collectionIds":["210b67db-fc9a-8121-bebe-000bb39448db"]},{"id":"50fefd65-c28e-4806-9183-aa12995f11f3","color":"pink","value":"SubMenu","collectionIds":["210b67db-fc9a-8121-bebe-000bb39448db"]},{"id":"b945f57d-dbcc-4603-9fab-5cfe447aad1b","color":"red","value":"Config","collectionIds":["210b67db-fc9a-8121-bebe-000bb39448db"]}]},"bB{M":{"name":"category","type":"select","options":[{"id":"c950d411-b38b-4257-9286-9f4713043e3e","color":"green","value":"漏洞分析","collectionIds":["210b67db-fc9a-8121-bebe-000bb39448db"]},{"id":"2a814645-0598-42ce-bc94-8e1c487ca555","color":"default","value":"CTF","collectionIds":["210b67db-fc9a-8121-bebe-000bb39448db"]},{"id":"8e657123-4cac-436f-98e0-b42df17b05c7","color":"blue","value":"二进制安全","collectionIds":["210b67db-fc9a-8121-bebe-000bb39448db"]}]},"d]hq":{"name":"slug","type":"text"},"sD^m":{"name":"tags","type":"multi_select","options":[{"id":"5cf04eea-d134-4783-8d81-af7eb7b32527","color":"pink","value":"任意文件读取漏洞","collectionIds":["210b67db-fc9a-8121-bebe-000bb39448db"]},{"id":"1be2ab44-3920-4ab5-b88b-0ad050d9bd4e","color":"gray","value":"JDBC反序列化漏洞","collectionIds":["210b67db-fc9a-8121-bebe-000bb39448db"]},{"id":"be93e0cf-e936-4e6f-bc34-79fd622707f2","color":"brown","value":"契约锁","collectionIds":["210b67db-fc9a-8121-bebe-000bb39448db"]},{"id":"fe505666-d77e-4577-a8be-4a10bf1b680f","color":"default","value":"Jenkins","collectionIds":["210b67db-fc9a-8121-bebe-000bb39448db"]}]},"wz|S":{"name":"summary","type":"text"},"title":{"name":"title","type":"title"},"f211bdc0-ee00-4186-9a7d-f68c055ec2ee":{"name":"status","type":"select","options":[{"id":"7abc61d4-b405-480d-b699-12588755fa65","color":"red","value":"Published","collectionIds":["210b67db-fc9a-8121-bebe-000bb39448db"]},{"id":"d1242312-e0a8-456d-b8f0-6e998e2c4fb2","color":"orange","value":"Invisible","collectionIds":["210b67db-fc9a-8121-bebe-000bb39448db"]},{"id":"41d5f5c6-b53c-42bc-8e0f-fc9402048480","color":"yellow","value":"Draft","collectionIds":["210b67db-fc9a-8121-bebe-000bb39448db"]}]}},"icon":"notion://custom_emoji/0dd8935a-39f8-4c94-aaf7-d2de23196366/225b67db-fc9a-80fe-9e2f-007add087083","cover":"attachment:de44147d-4cdf-48f2-8ff9-2a64437e928b:Untitled.png","format":{"copied_from_pointer":{"id":"4379bc14-5d22-453b-a153-12639616fc01","table":"collection","spaceId":"6c096b44-beb9-48ee-8f92-1efdde47f3a3"},"property_visibility":[{"property":"`gQ~","visibility":"show"},{"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee","visibility":"show"},{"property":"NX\\Q","visibility":"show"},{"property":"d]hq","visibility":"show"},{"property":"wz|S","visibility":"show"},{"property":"sD^m","visibility":"show"},{"property":"bB{M","visibility":"show"},{"property":"Dj]h","visibility":"hide_if_empty"},{"property":"uHoD","visibility":"show"},{"property":"kiCR","visibility":"hide"}],"collection_cover_position":0.3,"collection_page_properties":[{"visible":false,"property":"`gQ~"},{"visible":false,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"visible":false,"property":"NX\\Q"},{"visible":false,"property":"d]hq"},{"visible":false,"property":"wz|S"},{"visible":false,"property":"sD^m"},{"visible":true,"property":"bB{M"},{"visible":true,"property":"Dj]h"},{"visible":true,"property":"@NcA"},{"visible":true,"property":"ckw_"}],"collection_default_template":{"template_page_id":"210b67db-fc9a-8174-a8f9-c8a18f623a91"}},"parent_id":"210b67db-fc9a-80ed-8f3f-d06983ba70b2","parent_table":"block","alive":true,"file_ids":["6cf3dc36-2f98-4f0e-9679-1bdbb1485129","5520bd92-e709-4c0d-ad58-06923f23f7e9","624d393a-62e3-4464-a1bf-1c79ecd4fbda","d52f6766-3e32-4c3d-8529-46e1f214360f","abe3a0aa-2aff-4274-81bb-c2443d4ef9e2","a2a32795-101d-46aa-a7f6-eb35b8750166","29db38d2-d5fa-4fa6-8a92-3b527cfe80d1","de44147d-4cdf-48f2-8ff9-2a64437e928b"],"copied_from":"4379bc14-5d22-453b-a153-12639616fc01","template_pages":["210b67db-fc9a-8174-a8f9-c8a18f623a91"],"migrated":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366"},"role":"reader"}},"custom_emoji":{"225b67db-fc9a-80fe-9e2f-007add087083":{"value":{"id":"225b67db-fc9a-80fe-9e2f-007add087083","version":1,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","name":"头像","url":"https://s3-us-west-2.amazonaws.com/public.notion-static.com/1a46e89e-d46e-4cb3-8c5f-e95f51548a69/IMG_9104.jpg","created_time":1751573707284,"created_by_id":"917b4bd9-a4fc-48ad-95f0-8eed14f27ec5","created_by_table":"notion_user","alive":true},"role":"reader"}},"collection_view":{"210b67db-fc9a-8140-b9a0-000c10157bd6":{"value":{"id":"210b67db-fc9a-8140-b9a0-000c10157bd6","version":33,"type":"table","name":"表格","format":{"property_filters":[{"id":"5b8f22b6-0bee-4124-b984-fdf64509a908","filter":{"filter":{"value":{"type":"exact","value":"Post"},"operator":"enum_is"},"property":"`gQ~"}},{"id":"751a5e1a-70a0-4089-987a-3670b540b6c8","filter":{"filter":{"value":{"type":"exact","value":"Published"},"operator":"enum_is"},"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"}}],"table_properties":[{"width":100,"visible":true,"property":"`gQ~"},{"width":219,"visible":true,"property":"title"},{"width":288,"visible":true,"property":"wz|S"},{"width":100,"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"width":100,"visible":true,"property":"bB{M"},{"width":141,"visible":true,"property":"sD^m"},{"width":229,"visible":true,"property":"d]hq"},{"width":253,"visible":true,"property":"NX\\Q"},{"width":100,"visible":true,"property":"@NcA"},{"width":117,"visible":true,"property":"Dj]h"}],"collection_pointer":{"id":"210b67db-fc9a-8121-bebe-000bb39448db","table":"collection","spaceId":"0dd8935a-39f8-4c94-aaf7-d2de23196366"},"table_frozen_column_index":-1,"collection_view_default_template":{"template_page_id":"210b67db-fc9a-8174-a8f9-c8a18f623a91"}},"parent_id":"210b67db-fc9a-80ed-8f3f-d06983ba70b2","parent_table":"block","alive":true,"page_sort":["cc459e5b-0f15-4a0c-83db-bb6bf2001aa3","a9bfecc8-9761-4987-9aca-af79d4ebbd0c","7aa40ad8-1e69-4d56-b245-d135d3101cec","e4eefa7d-e2f2-44ed-83f6-fd6951d50900","0f9b7a0d-ad15-4ece-8a8b-948d96b50ff7","58a216ce-4d8d-4b60-906c-6097c5fd8d41","b824f35b-aee9-4a22-81c9-d44b65f99f43","ba565c08-0d2f-46cb-9fcb-5eeface44dfb","560c76dd-c69f-429b-827d-7974407bb23f","0533a861-81cc-40fa-8ab8-5be721800b86","3578fa31-ea0a-4e07-82dc-28704e0dc685","f2625c60-ca69-493b-858c-bf38979f468c","96b14e20-e592-42f6-b7d2-357f4693f18c","fe8fafec-6d1b-4fbb-8a7a-fb079a6bb8e4","9345db3a-b8bd-4e02-b296-9734958eddb6","26e8ddc4-10b4-4765-a96d-e87290556164","840f0871-b58b-428d-8a28-0861947974b4","5787bc4f-06a4-4158-a27f-6c81fb9b1efe","e1bff221-486f-42c8-9cf3-6379f83f3510","2db01777-47d0-4230-bbe8-ef65ab694707","ab0d5acb-9230-4656-9c49-1aff13aba865","98330ff5-71d2-4ea9-945a-ba76fc282e9d","210b67db-fc9a-811d-81e2-fcc41b12fa3d","210b67db-fc9a-81ae-a1ea-c7df4af5e0de","210b67db-fc9a-8128-9dc5-e8655b0083ca","210b67db-fc9a-81fe-82ae-e16f875e1a34","210b67db-fc9a-8175-b45b-d656fdb300b1","210b67db-fc9a-81b4-8fbc-c4a26a9e3520","210b67db-fc9a-812c-95fb-fd8ad06348de","210b67db-fc9a-813b-9281-d1c2c9c0913e","210b67db-fc9a-81e7-a2c3-e585202b80c0","210b67db-fc9a-8162-b7d2-d65b02feef1e","210b67db-fc9a-81b8-8383-fed75abb6683","210b67db-fc9a-81b6-9ede-f15ab087d659","210b67db-fc9a-81d4-8147-ec9b6a097f2a","ce720858-10b7-4c0c-8083-906f29150a81","210b67db-fc9a-818b-b080-e495834c6ed3","210b67db-fc9a-819e-91f5-ebfc587d9bd9","4194acae-3f4b-4c08-98b9-907a0b5bd4b9","210b67db-fc9a-813d-b04e-c6cc9120513a","210b67db-fc9a-811d-bf37-ea7bb7bb89f8","210b67db-fc9a-81a0-9b31-c81ada1d5234","210b67db-fc9a-81d5-9515-e047e4249662","210b67db-fc9a-817d-8747-fe695b029bf8","210b67db-fc9a-811c-a23d-f22a0f965d0c","f3550fb0-346c-4212-b57f-86433738b50b","210b67db-fc9a-81c3-b578-f172beccb2f5","210b67db-fc9a-8182-9b32-d4447de09d9d","210b67db-fc9a-819d-8901-f7e3a94c287f","210b67db-fc9a-81ae-a206-d42cf627b9b8","1ffb90ba-821d-4d16-8520-e46604a470d7","adc7c47b-6dd7-439f-9e06-6075256c91a7","210b67db-fc9a-812c-b633-fda809f7e262","210b67db-fc9a-81cc-8e4e-fc1230d8af35","210b67db-fc9a-81ac-b689-cd063e705208","210b67db-fc9a-81ab-8942-f05a48d44326","210b67db-fc9a-8156-9d18-c1e2bf214696","210b67db-fc9a-81d3-9508-f340444c0ed4","9e017f37-5917-4cda-afb8-92072abdbdba","8aafeb2c-85b4-4c4e-af36-3b9efacb167c","6d0e0705-57f3-4223-8745-a27295245029","dec89a30-7004-499f-a99e-05b2842cad2b","7efc83d4-2645-4578-b588-a9cffb15524a","1769e8de-bebe-4687-a28a-34c15859ed98","203f2c30-a3cd-4f70-95b3-07df9f996428","2a0b435c-6f77-4db8-be6b-831d177bd762","eac01009-c323-46fd-8339-09c282e6597e","c4b37f96-4ab0-4a0b-a16e-55bac3e32990","4ad5c69e-0dab-4d66-b548-360da7d53568","72d89744-ac04-4dd4-be8b-9d629acd7c11","32dc3358-e954-4934-9e71-cf1dfbca5b91","961e45bd-8bed-4ebc-b3d8-1f0e63736d04","212b67db-fc9a-808c-ae1f-e5a294b9e934","20fb67db-fc9a-8088-9172-e2de1af90222","13ab67db-fc9a-8042-8495-c3c466962833","12eb67db-fc9a-8056-8c41-dbc587108bd8","ad39dd30-fdb2-4fcc-aa48-a8112a6a346a","d56e837c-8e39-4d64-8589-c238a56d8e44","001c5807-161f-4069-a99c-1b57237d2992","b5038df5-153b-4d24-bc61-58013de5ca42","21d5e1a0-7a5d-48ff-998b-6377f7ce7a9f","eef4533f-2e0e-40aa-b2ad-b859a802825c","8cd88b0f-7d1f-4629-bfdc-de0f24de1308","9e3ffb57-ab3e-41d9-9828-91058b154dc2","385cfc11-4eea-4d18-832e-2ff52b908961","c9360c01-070f-4b23-ae03-4e435318a94b","9472ac55-a7d3-4758-b5f9-72c5df574e7f","f5cfb97a-9384-4548-9f51-de7f48c462e9","a3d95fbb-d7c6-440d-873c-f8eac56536cc","9b67c174-1618-43eb-9cf2-bbd771043354","07801026-0504-4b64-bad6-2c86260ef508","bb2f36ec-1ba9-480b-9ab5-b76c19b52d89","20f75995-1829-4fc6-9f33-13b64eb7e0be","5e87101b-0624-4fb6-85a0-deec5bf93aee","3dbbfc68-5579-41eb-afad-7cf5849dfc38","416b6888-102e-41db-a58e-3dd178d5b149"],"query2":{"aggregations":[{"property":"title","aggregator":"count"}]},"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","created_time":1749760576319,"last_edited_time":1757512769025,"created_by_table":"notion_user","created_by_id":"917b4bd9-a4fc-48ad-95f0-8eed14f27ec5"},"role":"reader"},"216b67db-fc9a-80de-96f5-000ce107ba3c":{"value":{"id":"216b67db-fc9a-80de-96f5-000ce107ba3c","version":5,"type":"feed","name":"","format":{"table_properties":[{"width":100,"visible":true,"property":"`gQ~"},{"width":116,"visible":true,"property":"bB{M"},{"width":142,"visible":true,"property":"sD^m"},{"width":219,"visible":true,"property":"title"},{"width":100,"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"width":155,"visible":true,"property":"d]hq"},{"width":352,"visible":true,"property":"wz|S"},{"width":111,"visible":true,"property":"NX\\Q"},{"width":100,"visible":true,"property":"@NcA"},{"width":117,"visible":true,"property":"Dj]h"}],"collection_pointer":{"id":"210b67db-fc9a-8121-bebe-000bb39448db","table":"collection","spaceId":"0dd8935a-39f8-4c94-aaf7-d2de23196366"},"table_subitem_toggle_column":"title"},"parent_id":"210b67db-fc9a-80ed-8f3f-d06983ba70b2","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","created_time":1750262108787,"last_edited_time":1750262114533,"created_by_table":"notion_user","created_by_id":"917b4bd9-a4fc-48ad-95f0-8eed14f27ec5"},"role":"reader"},"210b67db-fc9a-81c8-ad66-000cf4838056":{"value":{"id":"210b67db-fc9a-81c8-ad66-000cf4838056","version":16,"type":"table","name":"配置","format":{"gallery_cover":{"type":"page_content"},"list_properties":[{"visible":true,"property":"NX\\Q"},{"visible":true,"property":"d]hq"},{"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"visible":true,"property":"sD^m"},{"visible":true,"property":"`gQ~"},{"visible":false,"property":"wz|S"},{"visible":false,"property":"bB{M"},{"visible":false,"property":"Dj]h"},{"visible":false,"property":"@NcA"}],"property_filters":[{"id":"b54a6c88-635d-4de4-946e-5a855a1f4069","filter":{"filter":{"value":[{"type":"exact","value":"Notice"},{"type":"exact","value":"Menu"},{"type":"exact","value":"Config"},{"type":"exact","value":"SubMenu"},{"type":"exact","value":"Page"}],"operator":"enum_is"},"property":"`gQ~"}}],"table_properties":[{"width":116,"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"width":118,"visible":true,"property":"`gQ~"},{"width":219,"visible":true,"property":"title"},{"width":326,"visible":true,"property":"d]hq"},{"width":352,"visible":true,"property":"wz|S"},{"width":111,"visible":true,"property":"NX\\Q"},{"width":116,"visible":true,"property":"bB{M"},{"width":142,"visible":true,"property":"sD^m"},{"width":100,"visible":true,"property":"@NcA"},{"width":117,"visible":true,"property":"Dj]h"}],"collection_pointer":{"id":"210b67db-fc9a-8121-bebe-000bb39448db","table":"collection","spaceId":"0dd8935a-39f8-4c94-aaf7-d2de23196366"},"gallery_properties":[{"visible":true,"property":"title"},{"visible":true,"property":"d]hq"},{"visible":true,"property":"`gQ~"},{"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"visible":false,"property":"bB{M"},{"visible":false,"property":"NX\\Q"},{"visible":false,"property":"Dj]h"},{"visible":false,"property":"@NcA"},{"visible":false,"property":"wz|S"},{"visible":false,"property":"sD^m"}],"table_frozen_column_index":-1,"table_subitem_toggle_column":"title"},"parent_id":"210b67db-fc9a-80ed-8f3f-d06983ba70b2","parent_table":"block","alive":true,"page_sort":["c57af74d-b056-4ccf-ba8b-0d7c1f496e10","766e8682-6bba-4fc9-a223-e4c6622a4577","891b5d89-925f-453a-936e-0a8f2f3ac533","97bdadaa-3ff7-405b-9704-722b1fda31d0","a4a12958-73ee-4b60-850a-f7637b944d15","5432042f-e1a2-4f64-b1fe-c0908a49c1d8","5af9ef64-0c34-4637-a509-19f57db26e34","a05d790e-be77-4104-b03b-53208a76f635","b3b70470-4407-4534-9aa5-3a280fcde81f","26ab67db-fc9a-80fc-8b94-c98c499e9fdb","b8231e62-6e8b-4436-b49c-4d4152d83760","cfdd5398-6080-473c-ba92-8ce57c10a557"],"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","created_time":1757512779530,"last_edited_time":1757513472894,"created_by_table":"notion_user","created_by_id":"917b4bd9-a4fc-48ad-95f0-8eed14f27ec5"},"role":"reader"},"210b67db-fc9a-8138-ae5b-000cb5333572":{"value":{"id":"210b67db-fc9a-8138-ae5b-000cb5333572","version":7,"type":"gallery","name":"上传的文章","format":{"gallery_cover":{"type":"page_cover"},"property_filters":[{"id":"e5e69a48-8053-4d20-9e5a-73e8b24dab16","filter":{"filter":{"value":{"type":"exact","value":"Post"},"operator":"enum_is"},"property":"`gQ~"}}],"table_properties":[{"width":100,"visible":true,"property":"`gQ~"},{"width":116,"visible":true,"property":"bB{M"},{"width":142,"visible":true,"property":"sD^m"},{"width":219,"visible":true,"property":"title"},{"width":100,"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"width":155,"visible":true,"property":"d]hq"},{"width":352,"visible":true,"property":"wz|S"},{"width":111,"visible":true,"property":"NX\\Q"},{"width":100,"visible":true,"property":"@NcA"},{"width":117,"visible":true,"property":"Dj]h"}],"collection_groups":[{"value":{"type":"select","value":"心情随笔"},"property":"bB{M"},{"value":{"type":"select","value":"技术分享"},"property":"bB{M"},{"value":{"type":"select","value":"知行合一"},"property":"bB{M"},{"value":{"type":"select"},"hidden":true,"property":"bB{M"}],"collection_pointer":{"id":"210b67db-fc9a-8121-bebe-000bb39448db","table":"collection","spaceId":"0dd8935a-39f8-4c94-aaf7-d2de23196366"},"gallery_properties":[{"visible":true,"property":"title"},{"visible":true,"property":"NX\\Q"},{"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"visible":false,"property":"bB{M"},{"visible":false,"property":"Dj]h"},{"visible":false,"property":"@NcA"},{"visible":false,"property":"d]hq"},{"visible":false,"property":"wz|S"},{"visible":false,"property":"sD^m"},{"visible":false,"property":"`gQ~"}],"collection_group_by":{"sort":{"type":"manual"},"type":"select","property":"bB{M"},"table_subitem_toggle_column":"title","collection_group_aggregation":{"aggregator":"count","enforceMaxAggregationLimit":true}},"parent_id":"210b67db-fc9a-80ed-8f3f-d06983ba70b2","parent_table":"block","alive":true,"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","created_time":1757476396208,"last_edited_time":1757512800981,"created_by_table":"notion_user","created_by_id":"917b4bd9-a4fc-48ad-95f0-8eed14f27ec5"},"role":"reader"},"210b67db-fc9a-81b8-b791-000c44caa07c":{"value":{"id":"210b67db-fc9a-81b8-b791-000c44caa07c","version":3,"type":"board","name":"Post Board","format":{"board_columns":[{"value":{"type":"select","value":"Draft"},"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"value":{"type":"select","value":"Invisible"},"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"value":{"type":"select","value":"Published"},"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"value":{"type":"select"},"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"}],"board_columns_by":{"sort":{"type":"manual"},"type":"select","property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},"board_properties":[{"visible":true,"property":"title"},{"visible":true,"property":"bB{M"},{"visible":true,"property":"sD^m"},{"visible":true,"property":"wz|S"},{"visible":false,"property":"NX\\Q"},{"visible":false,"property":"Dj]h"},{"visible":false,"property":"@NcA"},{"visible":false,"property":"d]hq"},{"visible":false,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"visible":false,"property":"`gQ~"}],"table_properties":[{"width":100,"visible":true,"property":"`gQ~"},{"width":116,"visible":true,"property":"bB{M"},{"width":142,"visible":true,"property":"sD^m"},{"width":219,"visible":true,"property":"title"},{"width":100,"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"width":155,"visible":true,"property":"d]hq"},{"width":352,"visible":true,"property":"wz|S"},{"width":111,"visible":true,"property":"NX\\Q"},{"width":100,"visible":true,"property":"@NcA"},{"width":117,"visible":true,"property":"Dj]h"}],"collection_pointer":{"id":"210b67db-fc9a-8121-bebe-000bb39448db","table":"collection","spaceId":"0dd8935a-39f8-4c94-aaf7-d2de23196366"},"table_subitem_toggle_column":"title"},"parent_id":"210b67db-fc9a-80ed-8f3f-d06983ba70b2","parent_table":"block","alive":true,"page_sort":["224b67db-fc9a-80fa-adea-ce63867817b4"],"space_id":"0dd8935a-39f8-4c94-aaf7-d2de23196366","created_time":1751454035153,"last_edited_time":1751454035153,"created_by_table":"notion_user","created_by_id":"917b4bd9-a4fc-48ad-95f0-8eed14f27ec5"},"role":"reader"}},"notion_user":{},"collection_query":{},"signed_urls":{"dcfdf9a9-ca84-4e13-9d92-5a72620e36e4":"https://file.notion.so/f/f/0dd8935a-39f8-4c94-aaf7-d2de23196366/ea46ab67-9927-4882-992e-61df83b4f873/Untitled.png?table=block&id=dcfdf9a9-ca84-4e13-9d92-5a72620e36e4&spaceId=0dd8935a-39f8-4c94-aaf7-d2de23196366&expirationTimestamp=1757541600000&signature=EstQ12mAGlupREHbMgwUQtQitZnCeJT1GPPKUEKgbcw","423941b4-089f-4ae0-a5bd-ee32e38d92da":"https://file.notion.so/f/f/0dd8935a-39f8-4c94-aaf7-d2de23196366/dd24f283-b4a2-4ce8-820f-85b23690d6e9/Untitled.png?table=block&id=423941b4-089f-4ae0-a5bd-ee32e38d92da&spaceId=0dd8935a-39f8-4c94-aaf7-d2de23196366&expirationTimestamp=1757541600000&signature=cSjgL0G-NKahowG5M3mgizDAZcmPNF_ovf9WJj-pGlI","26ab67db-fc9a-8022-aa9e-d7ca6ae794fe":"https://file.notion.so/f/f/0dd8935a-39f8-4c94-aaf7-d2de23196366/406036a4-b760-405e-a538-bc37189dfc77/2025-09-10-21-56-432x.png?table=block&id=26ab67db-fc9a-8022-aa9e-d7ca6ae794fe&spaceId=0dd8935a-39f8-4c94-aaf7-d2de23196366&expirationTimestamp=1757541600000&signature=go66M0jrNYOHPpwPYv47FOlc3lW9ECUmgh-zZJLjA3M"}},"content":["ef10374c-621a-4fc1-b00b-73050a8eae1a","e2ea55c8-45a6-44b3-9b60-aa91d84486cf","271e44d3-9950-4339-b722-cf7a11302aeb","413b31a5-cd09-4624-b228-1124b910daf4","fee7571c-622e-45f7-8926-8d8c21201334","e5665bda-8070-46ce-8255-22c9f961d43e","b96c103d-3d5f-4ccc-b4c5-a64a3cb5284a","34a6ee56-7cc6-45b9-9489-3b0dd2c814ee","dcfdf9a9-ca84-4e13-9d92-5a72620e36e4","660ea9e9-f474-44d8-8986-9ff2b5f2fa19","1aa6a28e-4db6-4ffa-aa70-ec17fdf223f5","5f1ecb38-0289-46cf-b4a8-eab2f2a6075d","22fe5933-b59b-47bf-bf3c-58f148aac59d","7fd8faf6-7696-4dac-bd8d-d3a95f3bb670","2bfebd76-b512-4854-ba32-c754575eb999","423941b4-089f-4ae0-a5bd-ee32e38d92da","0582cc7e-f760-4cb8-8a31-f1a5075ab943","15ab3d28-3601-40f1-9973-995499ca09a8","a3af596f-247a-4e34-b037-59eb2083c38e","074c386c-53c5-4cfe-958d-43debf8e6f26","ba077cd5-bf8b-47d6-8727-8f27d1f1e709","a3728e08-9f7b-4448-afc3-2365fc3961b1","81ee5f17-49b2-4ea9-b384-3d53a057aa66","5fcb45f4-4ac5-4522-b37c-80cca58bfba3","efc611a3-92b2-44f2-a7af-e6855027fafe","368127f2-0d3c-4a41-8b39-21854a2b4636","9b7d3e5c-0234-47d0-a519-429db1dcd1b7","e631b258-3f61-41c1-8c7e-e54ec8beef7b","c46ddf4e-9eca-4c8d-8cc8-e01083449b5d","cf400c38-45ee-4d85-b6a5-caf983ee2be4","c9288bcc-9736-46ff-bd28-5c515492384b","3d620b49-c5ad-4d76-9a1a-62c2ec2dfc05","8bce3fc7-eea7-447c-b630-4a409ba09b45","d30227e1-54dc-4d5b-90f1-64da4d22042b","26ab67db-fc9a-8022-aa9e-d7ca6ae794fe","26ab67db-fc9a-80d5-aa11-fddab4d85a01"],"toc":[{"id":"ef10374c-621a-4fc1-b00b-73050a8eae1a","type":"sub_header","text":"Tea","indentLevel":0},{"id":"ba077cd5-bf8b-47d6-8727-8f27d1f1e709","type":"sub_header","text":"Xtea","indentLevel":0},{"id":"e631b258-3f61-41c1-8c7e-e54ec8beef7b","type":"sub_header","text":"Xxtea","indentLevel":0},{"id":"8bce3fc7-eea7-447c-b630-4a409ba09b45","type":"sub_header","text":"总结","indentLevel":0}],"wordCount":4194,"readTime":11},"prev":{"id":"385cfc11-4eea-4d18-832e-2ff52b908961","date":{"start_date":"2022-12-15"},"type":"Post","category":"二进制安全","summary":"llvm-pass初步上手","title":"LLVM-PASS编写","status":"Published","comment":"","publishDate":1671062400000,"publishDay":"2022-12-15","lastEditedDate":"2025-09-10T13:58:26.486Z","lastEditedDay":"2025-9-10","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[],"slug":"article/2022/12/15/385cfc11-4eea-4d18-832e-2ff52b908961","href":"/article/2022/12/15/385cfc11-4eea-4d18-832e-2ff52b908961","target":"_self","password":""},"next":{"id":"9472ac55-a7d3-4758-b5f9-72c5df574e7f","date":{"start_date":"2022-12-14"},"type":"Post","summary":"LLVM环境搭建和简单使用","title":"LLVM环境搭建与基本用法","status":"Published","category":"","comment":"","publishDate":1670976000000,"publishDay":"2022-12-14","lastEditedDate":"2025-09-10T03:53:36.204Z","lastEditedDay":"2025-9-10","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","ext":{},"tagItems":[],"slug":"article/2022/12/14/9472ac55-a7d3-4758-b5f9-72c5df574e7f","href":"/article/2022/12/14/9472ac55-a7d3-4758-b5f9-72c5df574e7f","target":"_self","password":""},"recommendPosts":[]},"__N_SSG":true}